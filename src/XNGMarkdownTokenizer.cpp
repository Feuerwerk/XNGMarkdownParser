//
// Copyright 2011-2014 NimbusKit
// Copyright 2014 XING AG
//
// Autogenerated by flex using Jeff Verkoeyen's Markdown grammar
// with additions by XING AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#define YY_NO_INPUT

#include "XNGMarkdownTokens.h"
#line 2 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/lex.xng_markdown.c"

#line 4 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/lex.xng_markdown.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE xng_markdownrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via xng_markdownrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void xng_markdownrestart (FILE *input_file ,yyscan_t yyscanner );
void xng_markdown_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE xng_markdown_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void xng_markdown_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void xng_markdown_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void xng_markdownpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void xng_markdownpop_buffer_state (yyscan_t yyscanner );

static void xng_markdownensure_buffer_stack (yyscan_t yyscanner );
static void xng_markdown_load_buffer_state (yyscan_t yyscanner );
static void xng_markdown_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER xng_markdown_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE xng_markdown_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE xng_markdown_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE xng_markdown_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *xng_markdownalloc (yy_size_t ,yyscan_t yyscanner );
void *xng_markdownrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void xng_markdownfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer xng_markdown_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        xng_markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            xng_markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        xng_markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            xng_markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 18
#define YY_END_OF_BUFFER 19
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[405] =
    {   0,
       16,   16,   19,   17,   15,   15,   17,   17,   17,   12,
       12,   12,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,    0,    0,   15,   15,
       15,   14,   11,   11,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    1,    0,    0,    0,   11,   11,
       12,    0,    0,    0,    0,    0,    0,    0,   12,   12,
        0,    0,    0,    0,    0,    0,    0,    1,    0,    5,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    6,
        0,   10,    0,    0,   14,   13,   11,    0,    0,    0,
        0,    0,    0,    1,    0,    1,    0,    0,    0,    0,

        0,    8,    0,    0,    0,   11,    0,    0,    0,    0,
        0,    0,   12,   12,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    6,
        0,    0,    7,    0,    0,    0,    7,    0,    0,    0,
        0,    0,    0,    2,    8,    0,    8,    8,    0,    8,
        8,    0,    0,    0,    0,    0,    0,   12,   12,    0,
        7,    0,    0,    0,    0,    0,    0,    7,    0,    0,
        0,    0,    0,    0,    2,    4,    6,    0,    2,    2,
        7,    0,    0,    0,    0,    0,    8,    0,    8,    8,

        8,    0,    8,    8,    8,    8,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    8,    0,
        0,    0,    0,    7,    0,    0,    0,    0,    0,    0,
        0,    7,    3,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    0,    8,    8,    0,    0,    0,
        9,    9,    0,    0,    9,    9,    8,    8,    0,    0,
        7,    0,    0,    3,    8,    8,    8,    8,    0,    8,
        8,    8,    8,    8,    0,    8,    8,    8,    8,    8,
        0,    8,    8,    8,    7,    0,    8,    0,    0,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    0,    8,    8,    8,    8,    8,    7,    8,    0,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    0,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    0,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    6,    7,    6,    6,    6,    6,    8,
        9,   10,    6,   11,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,    6,
       18,    6,    6,    6,   15,   15,   15,   15,   15,   19,
       20,   21,   20,   20,   20,   22,   20,   22,   20,   23,
       20,   20,   24,   25,   20,   20,   20,   20,   20,   20,
       26,   27,   28,    6,   29,   30,   15,   15,   15,   15,

       15,   31,   20,   32,   20,   20,   20,   22,   20,   22,
       20,   33,   20,   20,   34,   35,   20,   20,   20,   20,
       20,   20,   36,    6,   36,   37,    1,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   41,   41,   42,   42,   42,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   43,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   45,   44,   44,   46,
       47,   47,   47,   48,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    1,    1,    1,    2,    2,    3,    2,    2,    2,
        2,    4,    5,    6,    4,    2,    2,    7,    4,    4,
        4,    8,    4,    4,    4,    9,    4,    2,    2,    2,
        4,    4,    4,    4,    4,    3,    2,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[455] =
    {   0,
        0,   42, 1094, 1079,   48,   50,   54,  100,  110,  154,
      135,  137,  165,  202,  161,  163,  158,   66, 1041,   69,
      142,  143,  169, 1038,  207,  206, 1072,  201,  213,  220,
      222,  224,  225, 1068, 1062,  209,  191,  217,  231,  232,
      236,  239,  234,  240,  243, 1052,  277,  325, 1045,    0,
     1036,  223,  227,  319,  322,  323,  326,  228,  318,  317,
      342,  355,  344,    0,  372,  350,  325,  352,  375,  377,
      347,  395,  372,  375,  379,  382,  385,  388,  426,  242,
      427, 1044,  381,  432,  262,  378,  343,  413,  428,  433,
      442,  451,  454, 1041, 1023, 3005,  466,  394,  446,  396,

      494,  542,  590, 1016,  620,    0,  447,  588,  591,  598,
      602,  605,  582,  442,  644,  306,  646,  586,  592,  590,
      663,  994,  651,  631,  663,  647,  650,  652,  646,  419,
      664,  670,  666,  675,  594,  678,  682,  685, 1004, 1001,
      716,  690, 3005,  693,  697,  704,  972,  399,  964,  958,
      735,  467,  736,  746,  756,  804,  943,  835,  883,    0,
      886,  797,  916,  884,  887,  894,  335,  583,  798,  927,
      419,  803,  925,  919,  461,  802,  946,  883,  698,  882,
      954,  877,  726,  881,  910,  653,  901,  937,  892, 3005,
      817,  810,  816,  806,  957,  815,    0,  977,    0,  982,

        0,  987,  738, 1017,  997, 1023,  723, 1053,  386,  967,
     1025,  825, 1032, 1036,  936,  732,  989, 1052, 1056,  877,
      987, 1083, 1088,  711,  912,  701, 1094,  682,  913, 1102,
      700,  689,  654,    0, 1113, 1108, 1137,    0, 1143, 1137,
     1173, 1167,  583,  891, 1058, 1193,  985, 1080, 1223, 1254,
     1133,  634, 1204, 1125,  480, 3005, 1154, 1301, 1168, 1306,
      432,  244, 1198, 3005, 1188, 1324, 1330, 1086, 1202, 1347,
     1223, 1356, 1386,  725, 1303, 1028, 1416, 1365, 1155, 1446,
     1476,  643, 1507, 1555, 1220, 1374, 1316, 1366, 1404, 1408,
     1196, 1438, 1560, 1456, 1578, 1608,  944, 1638, 1383, 1585,

     1385, 1483,  255, 1669, 1717,    0, 1603,  250, 1407, 1413,
     1722, 1415, 1740, 1747, 1777, 1475, 1553, 1495, 1554, 1808,
     1856, 1904,  238, 1934, 1770, 1583, 1584, 1909, 1605, 1499,
     1927, 1642, 1618, 1635, 1715, 1965, 2013,  171, 2044, 2092,
        0, 2097, 2127, 2122, 1716, 1739, 1626, 1745, 1656, 1746,
     1768, 1769,    0, 2158,    0, 2152,    0, 2189,  150, 2219,
     2182, 2249, 2212, 1776, 1902, 1903, 1926, 1929,    0, 2242,
     2267,    0, 2272, 2302, 2297, 2332, 2327, 2004, 2005, 2350,
     2357, 2375, 2405, 2380, 2435, 1800, 2398, 2428, 2453, 2483,
     2458, 2101, 2476, 2501, 2506, 2536, 1959, 2531, 2035, 2554,

     2131, 2115, 2145, 3005, 2585, 2594, 2603, 2612, 2621, 2630,
     2639, 2648, 2657, 2666, 2675, 2683, 2692, 2701, 2710, 2719,
     2728, 2737, 2743, 2751, 2760, 2769, 2778, 2787, 2796, 2805,
     2811, 2818, 2827, 2836, 2845, 2851, 2856, 2864, 2873, 2881,
     2887, 2892, 2899, 2907, 2915, 2923, 2932, 2941, 2950, 2959,
     2968, 2977, 2986, 2995
    } ;

static yyconst flex_int16_t yy_def[455] =
    {   0,
      404,    1,  404,  405,  405,  404,  404,  406,  404,    9,
       10,   10,  407,  408,  409,  410,  405,    9,    9,    9,
        9,    9,    9,    9,  411,    9,  405,  404,  405,  404,
      404,  404,    7,  405,    7,  405,  405,  405,  405,  405,
      405,  405,  406,  412,  413,    9,  404,  414,    7,   47,
       10,    9,    9,    9,    9,    9,    9,    9,   10,   10,
      407,  415,  407,    9,    9,  409,  416,  417,  410,  410,
      418,   10,    9,    9,    9,    9,    9,    9,  411,  419,
      411,  405,    9,  404,  404,  404,    7,  405,  405,  405,
      405,  405,  405,  405,  412,  404,  412,  413,  420,  421,

      404,  404,  422,    9,    9,  101,    9,    9,    9,    9,
        9,    9,   10,   10,  407,  415,  415,  415,  415,  423,
        9,  416,  416,  417,  424,  425,  418,  418,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,  419,  419,
      419,  411,  404,  405,  405,  405,  412,  405,  420,  404,
      420,  421,  426,  405,  404,  427,  102,  404,  428,  102,
      102,  423,    9,    9,    9,    9,  405,   10,   10,  429,
      415,  430,  423,  431,  423,  432,    9,  416,  405,  424,
      424,  404,  425,  433,  405,  418,  419,  411,  405,  404,
      420,  405,  426,  404,  426,  405,  155,  434,  155,  155,

      158,  435,  102,  102,  436,  102,  437,    9,  405,  429,
      430,  438,  429,  429,  430,  439,  430,  430,  436,  440,
      423,  423,    9,  424,  405,  433,  433,  404,  405,  411,
      404,  426,  405,  155,  155,  441,  155,  158,  158,  436,
      102,  436,  442,  242,  443,  102,  441,  444,    9,  404,
      407,  415,  430,  439,  405,  404,  242,  242,  222,    9,
      433,  404,  411,  404,  441,  155,  441,  441,  445,  155,
      442,  158,  102,  442,  446,  242,  258,  102,  441,  441,
        9,  447,  404,  448,  430,  439,  258,  222,    9,  155,
      441,  280,  155,  442,  158,  102,  442,  442,  277,  102,

      280,    9,  283,  404,  449,  283,  283,  439,  258,  222,
      155,  292,  155,  158,  102,  298,  277,  102,  280,  404,
      404,  450,  283,  283,  283,  258,  222,  155,  292,  155,
      158,  102,  298,  277,  280,  404,  451,  321,  404,  452,
      321,  321,  283,  283,  258,  222,  155,  292,  158,  298,
      277,  280,  336,  453,  336,  336,  339,  454,  321,  321,
      321,  283,  283,  258,  292,  298,  277,  280,  336,  336,
      336,  339,  339,  321,  321,  283,  283,  292,  298,  336,
      336,  339,  321,  321,  283,  283,  336,  336,  339,  321,
      321,  283,  336,  336,  339,  321,  321,  336,  336,  339,

      321,  336,  339,    0,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404
    } ;

static yyconst flex_int16_t yy_nxt[3054] =
    {   0,
        4,    5,    6,    4,    7,    4,    4,    4,    4,    8,
        4,    9,    4,    4,   10,    4,    4,    4,   11,   10,
       12,   10,   10,   10,   10,   13,   14,    4,   15,   16,
       11,   12,   10,   10,   10,    4,   17,    9,    9,    9,
        9,   18,   19,   20,   21,   22,   23,   24,   25,   29,
       30,   31,   32,   26,   27,   27,   28,   27,   33,   27,
       27,   27,   27,   27,   34,   27,   34,   27,   35,   27,
       34,   27,   35,   35,   35,   35,   35,   35,   35,   27,
       27,   27,   27,   27,   35,   35,   35,   35,   35,   27,
       27,   27,   27,   27,   27,   36,   37,   38,   39,   40,

       41,   42,   44,   72,   72,   72,   74,   74,   74,   45,
       27,   27,   28,   27,   27,   27,   27,   27,   27,   27,
       27,   46,   47,   27,   46,   27,   27,   27,   46,   46,
       46,   46,   46,   46,   46,   27,   48,   27,   27,   27,
       46,   46,   46,   46,   46,   27,   27,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   49,   59,
       28,   60,  320,   67,   34,   28,   50,   62,   51,   59,
       34,   60,   51,   51,   51,   51,   51,   51,   51,   75,
       75,   76,   76,  320,   51,   51,   51,   51,   51,   68,
       27,   63,   70,   28,   71,   52,   53,   54,   55,   56,

       57,   58,   27,   27,   28,   27,   77,   77,   77,   80,
       82,   28,   84,   81,   29,   30,   65,   83,   84,   28,
       65,   31,   31,   31,   31,   31,   85,   86,   27,   87,
       88,   84,   65,   28,   28,  101,   44,   84,   28,  101,
      101,   28,   27,   94,  140,   99,   35,   35,   35,   96,
      320,   97,  100,  141,   89,   89,   89,   97,  256,  141,
       51,   51,   51,   31,   85,  112,  107,  320,   90,   90,
       91,   91,  264,   92,   92,   92,   93,   27,   27,   28,
       27,   27,   27,   27,   27,   27,   27,   27,  102,   27,
       27,  102,   27,   27,   27,  102,  102,  102,  102,  102,

      102,  102,   27,  103,   27,   27,   27,  102,  102,  102,
      102,  102,   27,   27,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,   27,   27,   28,   27,  106,
      106,  101,  118,  119,  101,  101,  123,   28,  101,  105,
      113,  114,  123,  105,   62,   86,   62,   87,  209,   28,
      113,  114,   67,   96,  125,  105,  108,  108,  108,  109,
      109,  110,  110,  111,  111,  111,  117,   27,   63,  115,
       63,  115,  117,   64,  120,   64,   64,   28,   94,   28,
      126,  118,  119,  128,  101,   82,  121,  101,   28,   84,
      121,  101,   83,  101,  101,   84,   99,  101,  153,  250,

      101,   28,  121,  148,   70,  154,   70,  106,  189,   72,
       72,   72,   72,   72,   72,   28,   72,   72,   72,  136,
      136,  136,  137,  137,  137,  138,  138,  138,   80,   80,
       28,  101,   27,  142,  143,   28,  129,  130,  131,  132,
      133,  134,  135,   84,   28,  118,  119,   27,   27,   84,
       35,   35,   35,   28,  106,  150,   28,  151,   73,  101,
      228,   27,   27,  151,  169,   35,   35,   35,  147,  153,
       35,   35,   35,  207,  169,   96,  192,   97,  404,  144,
      144,  144,   28,   97,   51,   51,   51,  176,  145,  145,
      145,  146,  146,  146,   27,   27,   28,   27,   27,   27,

       27,   27,   27,   27,   27,  155,   27,   27,  155,   27,
       27,   27,  155,  155,  155,  155,  155,  155,  155,   27,
      156,   27,   27,   27,  155,  155,  155,  155,  155,   27,
       27,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,   27,   27,   28,   27,   27,   27,   27,   27,
       27,   27,   27,  157,   47,  158,  157,   27,   27,   27,
      157,  157,  157,  157,  157,  157,  157,   27,  159,   27,
       27,   27,  157,  157,  157,  157,  157,   27,   27,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
       27,   27,   28,   27,  106,  106,  243,  167,  167,  172,

      101,  173,  174,  101,  161,  168,  101,   84,  161,  275,
      101,  116,  118,  119,  101,  168,  176,  101,  118,  119,
      161,  104,  162,  104,  104,   51,   51,   51,   51,   51,
       51,   78,  101,  125,  163,  164,  164,  164,  163,  165,
      165,  165,  166,  166,  166,   28,   62,   27,  171,  184,
      163,  170,   28,  178,   28,   28,   28,  117,  101,  179,
      118,  119,  123,  117,   64,  120,   64,   64,  123,   27,
       63,  115,  118,  119,  181,  185,  101,  177,  101,   96,
      181,  177,  101,   72,   72,   72,  128,  101,  186,  186,
      101,  182,   80,  177,  101,   28,  188,  101,  194,   28,

       28,   74,   74,   74,   76,   76,   28,   75,   75,  264,
      262,   27,   77,   77,   77,   72,   72,   72,  187,   72,
       72,   72,   72,   72,   72,   27,  189,  141,  184,  228,
       35,   35,   35,  141,   35,   35,   35,  191,  243,  182,
      256,   35,   35,   35,  150,  194,  151,  195,   28,  248,
      101,  275,  151,  195,  225,  196,   27,   27,   28,   27,
       27,   27,   27,   27,   27,   27,   27,  197,   27,  158,
      197,   27,   27,   27,  197,  197,  197,  197,  197,  197,
      197,   27,  198,   27,   27,   27,  197,  197,  197,  197,
      197,   27,   27,  197,  197,  197,  197,  197,  197,  197,

      197,  197,  197,  197,   27,   27,   28,   27,  173,  207,
      106,  116,   28,  167,   84,  231,  222,   28,  200,  196,
      222,  168,  200,  176,  233,  194,  150,  254,  216,  217,
      218,  168,  222,  255,  200,   27,   27,   28,   27,   27,
       27,   27,   27,   27,   27,   27,  201,   27,  158,  201,
       27,   27,   27,  201,  201,  201,  201,  201,  201,  201,
       27,  202,   27,   27,   27,  201,  201,  201,  201,  201,
       27,   27,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,   27,   27,   28,   27,  160,  205,  160,
      160,  258,  227,  404,   28,  258,  101,  204,  227,  101,

      206,  204,  244,  140,  206,  190,  101,  258,  404,  228,
      182,   96,   28,  204,   28,   28,  206,  104,  162,  104,
      104,   51,   51,   51,   51,   51,   51,  143,  101,  211,
      208,   51,   51,   51,  208,   61,  173,  207,  229,   80,
      229,  233,   84,  230,  252,  220,  208,   64,  120,   64,
       64,  176,  212,  213,  214,  101,  224,  243,   27,  232,
      223,  216,  217,  218,  223,  181,  194,  190,  195,  211,
      275,  181,   27,  150,  195,  251,  223,   27,   27,   28,
       27,   96,  182,  199,  236,  199,  199,   27,   27,   28,
       27,  235,  212,  213,  214,  235,  237,  252,  243,  207,

      237,  239,  404,  140,  404,  239,  140,  235,  242,  174,
      243,  269,  237,  176,   84,  217,  218,  239,  203,  240,
      203,  203,   96,  245,  160,  205,  160,  160,  101,  101,
      404,  241,   96,  252,  211,  241,  253,  246,  211,  244,
      251,  246,  253,   28,  251,  404,   28,  241,  106,   49,
      216,  217,  218,  246,  104,  162,  104,  104,  213,  214,
      252,  212,  213,  214,  101,  101,   49,  249,  174,  243,
       28,  249,  277,  404,   28,   78,  277,  216,  217,  218,
       73,   28,  245,  249,  221,  221,  221,  221,  277,   64,
      120,   64,   64,  404,  280,  207,  261,  259,  280,  243,

      404,  259,  260,  404,   80,  227,  260,  404,  263,  176,
      280,  227,  269,  259,  234,  265,  234,  234,  260,  267,
      404,  243,  228,   27,  404,   84,  404,  266,  404,  404,
      404,  266,  404,  256,  269,   62,  286,   27,  199,  236,
      199,  199,  286,  266,  238,  271,  238,  238,  242,  207,
      243,  270,  404,  404,   84,  270,  404,  272,   27,   63,
      115,  272,  404,  245,  404,  244,  174,  270,  243,  143,
      404,  404,  404,  272,  203,  240,  203,  203,  242,  207,
      243,  269,  288,  404,   84,  101,  288,  273,  404,  404,
      404,  273,  404,  245,  160,  205,  160,  160,  288,  267,

       80,  243,  404,  273,   27,   84,  285,  278,  404,  243,
      404,  278,  252,  404,  269,  253,  292,  404,  404,   27,
      292,  253,  269,  278,  104,  162,  104,  104,  252,  216,
      217,  218,  292,   27,  294,  101,  243,  281,  404,  404,
       84,  281,  404,  404,  404,  216,  217,  218,  404,  275,
      404,  404,  404,  281,  282,  282,   28,  282,   27,  282,
      282,  282,  282,  282,  282,  283,  282,  282,  283,  282,
      282,  282,  283,  283,  283,  283,  283,  283,  283,  282,
      284,  282,  282,  282,  283,  283,  283,  283,  283,  282,
      282,  283,  283,  283,  283,  283,  283,  283,  283,  283,

      283,  283,  257,  257,  257,  257,  404,   64,  120,   64,
       64,  404,  244,  174,  404,  287,  404,  298,  404,  287,
      289,  298,  404,  404,  289,  234,  265,  234,  234,  404,
      309,  287,  143,  298,  309,  404,  289,  404,  290,  404,
      404,  267,  290,  243,  404,  404,  309,   84,  199,  236,
      199,  199,  404,  404,  290,  404,  269,  238,  271,  238,
      238,  293,  404,  404,  404,  293,  160,  205,  160,  160,
      295,  404,  404,  404,  295,  404,  308,  293,  404,  300,
      310,  404,  256,  300,  310,  286,  295,  203,  240,  203,
      203,  286,  404,  404,  404,  300,  310,  317,  101,  319,

      296,  317,  404,  319,  296,   64,  120,   64,   64,  234,
      265,  234,  234,  317,  404,  319,  296,  276,  276,  276,
      276,  326,  311,  404,  404,  326,  311,  327,  207,  329,
      299,  327,  404,  329,  299,  404,  404,  326,  311,  291,
      291,  291,  291,  327,  404,  329,  299,  279,  279,  279,
      279,  404,  312,  404,  404,  404,  312,  404,  143,  243,
      301,  404,  404,  404,  301,  404,  404,  294,  312,  243,
      404,  404,  269,   84,  404,  404,  301,  104,  162,  104,
      104,  404,  275,  404,  104,  162,  104,  104,  101,  333,
      302,  404,  404,  333,  302,  101,  160,  205,  160,  160,

      199,  236,  199,  199,  404,  333,  302,  282,  282,   28,
      282,   27,  282,  282,  282,  282,  282,  282,  303,  304,
      282,  303,  282,  282,  282,  303,  303,  303,  303,  303,
      303,  303,  282,  305,  282,  282,  282,  303,  303,  303,
      303,  303,  282,  282,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  282,  282,   28,  282,   64,
      404,  199,  236,  199,  199,  404,  404,  334,  335,  307,
      404,  334,  335,  307,  313,  404,  404,  404,  313,  238,
      271,  238,  238,  334,  335,  307,  160,  205,  160,  160,
      313,  404,  314,  404,  404,  404,  314,  345,  346,  318,

      404,  345,  346,  318,  306,  120,  306,   64,  314,  203,
      240,  203,  203,  345,  346,  318,  404,  325,  404,  348,
      101,  325,  315,  348,  404,  404,  315,  234,  265,  234,
      234,  404,  350,  325,  404,  348,  350,  404,  315,  297,
      297,  297,  297,  203,  240,  203,  203,  404,  350,  351,
      404,  243,  316,  351,  101,  404,  316,  238,  271,  238,
      238,  404,  404,  404,  275,  351,  404,  404,  316,  282,
      282,   28,  282,   27,  282,  282,  282,  282,  282,  282,
      321,  282,  282,  321,  282,  282,  282,  321,  321,  321,
      321,  321,  321,  321,  282,  322,  282,  282,  282,  321,

      321,  321,  321,  321,  282,  282,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  282,  282,   28,
      282,  104,  404,  234,  265,  234,  234,  404,  404,  352,
      364,  324,  404,  352,  364,  324,  328,  404,  404,  404,
      328,  199,  236,  199,  199,  352,  364,  324,  238,  271,
      238,  238,  328,  175,  330,  404,  404,  175,  330,  365,
      366,  331,  404,  365,  366,  331,  404,  404,  404,  175,
      330,  306,  120,  306,   64,  365,  366,  331,  203,  240,
      203,  203,  367,  368,  344,  404,  367,  368,  344,  101,
      244,  332,  404,  404,  244,  332,  404,  404,  367,  368,

      344,  306,  120,  306,   64,  404,  244,  332,  282,  282,
       28,  282,   27,  282,  282,  282,  282,  282,  282,  336,
      282,  282,  336,  282,  282,  282,  336,  336,  336,  336,
      336,  336,  336,  282,  337,  282,  282,  282,  336,  336,
      336,  336,  336,  282,  282,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  282,  282,   28,  282,
       27,  282,  282,  282,  282,  282,  282,  338,  304,  339,
      338,  282,  282,  282,  338,  338,  338,  338,  338,  338,
      338,  282,  340,  282,  282,  282,  338,  338,  338,  338,
      338,  282,  282,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  282,  282,   28,  282,  160,  404,
      234,  265,  234,  234,  404,  404,  378,  379,  342,  404,
      378,  379,  342,  347,  404,  404,  404,  347,  238,  271,
      238,  238,  378,  379,  342,  323,  162,  323,  104,  347,
      244,  349,  404,  268,  244,  349,  320,  268,  343,  404,
      404,  404,  343,  404,  404,  404,  244,  349,  404,  268,
      341,  205,  341,  160,  343,  282,  282,   28,  282,   27,
      282,  282,  282,  282,  282,  282,  353,  282,  339,  353,
      282,  282,  282,  353,  353,  353,  353,  353,  353,  353,
      282,  354,  282,  282,  282,  353,  353,  353,  353,  353,

      282,  282,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  282,  282,   28,  282,  199,  268,  274,
      404,  404,  268,  274,  404,  404,  404,  356,  404,  404,
      404,  356,  404,  404,  268,  274,  355,  236,  355,  199,
      404,  404,  404,  356,  282,  282,   28,  282,   27,  282,
      282,  282,  282,  282,  282,  357,  282,  339,  357,  282,
      282,  282,  357,  357,  357,  357,  357,  357,  357,  282,
      358,  282,  282,  282,  357,  357,  357,  357,  357,  282,
      282,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  282,  282,   28,  282,  203,  404,  341,  205,

      341,  160,  323,  162,  323,  104,  360,  404,  404,  404,
      360,  361,  404,  320,  404,  361,  369,  265,  369,  234,
      404,  404,  360,  306,  120,  306,   64,  361,  323,  162,
      323,  104,  359,  240,  359,  203,  363,  404,  404,  320,
      363,  362,  404,  320,  404,  362,  372,  271,  372,  238,
      404,  404,  363,  355,  236,  355,  199,  362,  282,  282,
       28,  282,  234,  404,  404,  404,  371,  404,  404,  404,
      371,  404,  370,  404,  404,  404,  370,  404,  404,  404,
      404,  404,  371,  341,  205,  341,  160,  404,  370,  282,
      282,   28,  282,  238,  404,  404,  375,  404,  404,  404,

      375,  404,  404,  373,  404,  404,  404,  373,  404,  404,
      404,  404,  375,  306,  120,  306,   64,  404,  404,  373,
      359,  240,  359,  203,  404,  404,  377,  404,  404,  404,
      377,  320,  404,  374,  404,  404,  404,  374,  404,  404,
      404,  404,  377,  369,  265,  369,  234,  404,  404,  374,
      323,  162,  323,  104,  404,  404,  380,  404,  404,  404,
      380,  320,  404,  376,  404,  404,  404,  376,  355,  236,
      355,  199,  380,  372,  271,  372,  238,  404,  404,  376,
      404,  381,  404,  404,  404,  381,  382,  404,  404,  404,
      382,  404,  404,  404,  404,  404,  404,  381,  341,  205,

      341,  160,  382,  359,  240,  359,  203,  404,  404,  404,
      404,  384,  404,  404,  320,  384,  383,  404,  404,  404,
      383,  404,  404,  404,  404,  404,  404,  384,  306,  120,
      306,   64,  383,  323,  162,  323,  104,  404,  404,  404,
      404,  386,  404,  404,  320,  386,  385,  404,  404,  404,
      385,  369,  265,  369,  234,  404,  404,  386,  355,  236,
      355,  199,  385,  404,  387,  404,  404,  404,  387,  404,
      404,  388,  404,  404,  404,  388,  372,  271,  372,  238,
      387,  341,  205,  341,  160,  404,  404,  388,  404,  389,
      404,  404,  404,  389,  391,  404,  404,  404,  391,  369,

      265,  369,  234,  404,  404,  389,  359,  240,  359,  203,
      391,  404,  393,  404,  404,  404,  393,  320,  404,  390,
      404,  404,  404,  390,  404,  404,  404,  404,  393,  355,
      236,  355,  199,  404,  404,  390,  323,  162,  323,  104,
      404,  404,  394,  404,  404,  404,  394,  320,  404,  392,
      404,  404,  404,  392,  372,  271,  372,  238,  394,  341,
      205,  341,  160,  404,  404,  392,  404,  395,  404,  404,
      404,  395,  397,  404,  404,  404,  397,  369,  265,  369,
      234,  404,  404,  395,  359,  240,  359,  203,  397,  404,
      398,  404,  404,  404,  398,  320,  404,  396,  404,  404,

      404,  396,  355,  236,  355,  199,  398,  372,  271,  372,
      238,  404,  404,  396,  404,  399,  404,  404,  404,  399,
      400,  404,  404,  404,  400,  404,  404,  404,  404,  404,
      404,  399,  369,  265,  369,  234,  400,  359,  240,  359,
      203,  404,  404,  404,  404,  402,  404,  404,  320,  402,
      401,  404,  404,  404,  401,  372,  271,  372,  238,  404,
      404,  402,  404,  404,  404,  404,  401,  404,  403,  404,
      404,  404,  403,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  403,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   43,   43,   43,   43,   43,   43,

       43,   43,   43,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  116,  116,  116,  116,  116,
      116,  116,  116,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  124,  124,  124,  124,  124,  124,  124,  124,

      124,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      139,  139,  404,  139,  139,  139,  139,  404,  139,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  175,  175,  404,  175,
      175,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  210,  210,  210,  210,

      210,  210,  210,  210,  210,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  219,  404,  404,  404,  219,  221,
      221,  221,  221,  221,  221,  221,  221,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  244,  244,  244,  244,  244,  247,
      404,  404,  404,  247,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  257,  257,  257,  257,  257,  257,  257,  257,
      268,  404,  268,  268,  268,  274,  404,  274,  404,  274,

      276,  276,  276,  276,  276,  276,  276,  276,  279,  279,
      279,  279,  279,  279,  279,  279,  291,  291,  291,  291,
      291,  291,  291,  291,  297,  297,  297,  297,  297,  297,
      297,  297,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  372,  372,  372,  372,  372,

      372,  372,  372,  372,    3,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404
    } ;

static yyconst flex_int16_t yy_chk[3054] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    5,
        5,    6,    6,    2,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    8,   18,   18,   18,   20,   20,   20,    8,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,   10,   11,
       17,   12,  359,   15,   10,   16,   10,   13,   10,   11,
       10,   12,   10,   10,   10,   10,   10,   10,   10,   21,
       21,   22,   22,  338,   10,   10,   10,   10,   10,   15,
       13,   13,   16,   37,   17,   10,   10,   10,   10,   10,

       10,   10,   14,   14,   14,   14,   23,   23,   23,   25,
       26,   36,   28,   25,   29,   29,   14,   26,   28,   38,
       14,   30,   30,   31,   31,   32,   32,   33,   25,   33,
       37,   30,   14,   39,   40,   52,   43,   30,   41,   53,
       58,   42,   25,   43,   80,   45,   36,   36,   36,   44,
      323,   44,   45,   80,   38,   38,   38,   44,  308,   80,
       52,   52,   52,   85,   85,   58,   53,  303,   39,   39,
       40,   40,  262,   41,   41,   41,   42,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   48,   48,   48,   48,   60,
       59,   54,  116,  116,   55,   56,   67,  167,   57,   48,
       59,   60,   67,   48,   61,   87,   63,   87,  167,   71,
       59,   60,   66,   67,   68,   48,   54,   54,   54,   55,
       55,   56,   56,   57,   57,   57,   62,   61,   61,   61,
       63,   63,   62,   65,   65,   65,   65,   69,   66,   70,
       68,   62,   62,   71,   73,   83,   65,   74,  209,   86,
       65,   75,   83,   83,   76,   86,   98,   77,  100,  209,

       78,  148,   65,   98,   69,  100,   70,   72,  148,   73,
       73,   73,   74,   74,   74,   88,   75,   75,   75,   76,
       76,   76,   77,   77,   77,   78,   78,   78,   79,   81,
       89,  130,   79,   81,   84,   90,   72,   72,   72,   72,
       72,   72,   72,   84,   91,  171,  171,   79,   81,   84,
       88,   88,   88,   92,  114,   99,   93,   99,  130,  107,
      261,   79,   81,   99,  114,   89,   89,   89,   97,  152,
       90,   90,   90,  175,  114,   97,  152,   97,  175,   91,
       91,   91,  255,   97,  107,  107,  107,  175,   92,   92,
       92,   93,   93,   93,  101,  101,  101,  101,  101,  101,

      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      103,  103,  103,  103,  113,  168,  243,  113,  168,  119,

      108,  120,  120,  109,  103,  113,  135,  120,  103,  243,
      110,  118,  118,  118,  111,  113,  120,  112,  119,  119,
      103,  105,  105,  105,  105,  108,  108,  108,  109,  109,
      109,  135,  105,  124,  105,  110,  110,  110,  105,  111,
      111,  111,  112,  112,  112,  282,  115,  282,  117,  126,
      105,  115,  127,  123,  128,  186,  233,  117,  129,  124,
      252,  252,  123,  117,  121,  121,  121,  121,  123,  115,
      115,  115,  117,  117,  125,  126,  131,  121,  133,  123,
      125,  121,  132,  129,  129,  129,  127,  134,  128,  186,
      136,  125,  142,  121,  137,  144,  142,  138,  232,  145,

      179,  131,  131,  131,  133,  133,  146,  132,  132,  231,
      228,  142,  134,  134,  134,  136,  136,  136,  141,  137,
      137,  137,  138,  138,  138,  142,  179,  141,  183,  226,
      144,  144,  144,  141,  145,  145,  145,  151,  274,  224,
      216,  146,  146,  146,  151,  153,  151,  153,  154,  207,
      203,  274,  151,  153,  183,  154,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  156,  156,  156,  156,  162,  162,
      169,  172,  192,  169,  162,  194,  176,  196,  156,  192,
      176,  169,  156,  162,  196,  193,  191,  212,  172,  172,
      172,  169,  176,  212,  156,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  159,  159,  159,  159,  161,  161,  161,
      161,  220,  184,  244,  189,  220,  164,  159,  184,  165,

      161,  159,  244,  187,  161,  182,  166,  220,  244,  184,
      180,  178,  185,  159,  225,  229,  161,  163,  163,  163,
      163,  164,  164,  164,  165,  165,  165,  173,  163,  170,
      163,  166,  166,  166,  163,  170,  173,  173,  185,  188,
      225,  229,  173,  188,  215,  174,  163,  177,  177,  177,
      177,  173,  170,  170,  170,  157,  181,  297,  188,  195,
      177,  215,  215,  215,  177,  181,  195,  150,  195,  210,
      297,  181,  188,  149,  195,  210,  177,  198,  198,  198,
      198,  147,  181,  200,  200,  200,  200,  202,  202,  202,
      202,  198,  210,  210,  210,  198,  200,  217,  247,  221,

      200,  202,  247,  140,  221,  202,  139,  198,  205,  205,
      205,  247,  200,  221,  205,  217,  217,  202,  204,  204,
      204,  204,  122,  205,  206,  206,  206,  206,  104,  204,
      276,  204,   95,  211,  213,  204,  211,  206,  214,  276,
      213,  206,  211,   94,  214,  276,   82,  204,   51,   49,
      211,  211,  211,  206,  208,  208,  208,  208,  213,  213,
      218,  214,  214,  214,   46,  208,   35,  208,  219,  219,
       34,  208,  245,  219,   27,   24,  245,  218,  218,  218,
       19,    4,  219,  208,  222,  222,  222,  222,  245,  223,
      223,  223,  223,    3,  248,  222,  227,  222,  248,  268,

      222,  222,  223,  268,  230,  227,  223,    0,  230,  222,
      248,  227,  268,  222,  235,  235,  235,  235,  223,  236,
        0,  236,  227,  230,    0,  236,    0,  235,    0,    0,
        0,  235,    0,  254,  236,  251,  254,  230,  237,  237,
      237,  237,  254,  235,  239,  239,  239,  239,  240,  240,
      240,  237,    0,    0,  240,  237,  257,  239,  251,  251,
      251,  239,    0,  240,    0,  257,  257,  237,  279,  242,
        0,  257,  279,  239,  241,  241,  241,  241,  242,  242,
      242,  279,  259,    0,  242,  241,  259,  241,    0,    0,
        0,  241,    0,  242,  246,  246,  246,  246,  259,  265,

      263,  265,    0,  241,  263,  265,  253,  246,    0,  291,
        0,  246,  253,  291,  265,  253,  269,    0,    0,  263,
      269,  253,  291,  246,  249,  249,  249,  249,  285,  253,
      253,  253,  269,  263,  271,  249,  271,  249,    0,    0,
      271,  249,    0,    0,    0,  285,  285,  285,    0,  271,
        0,    0,    0,  249,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,

      250,  250,  258,  258,  258,  258,    0,  260,  260,  260,
      260,    0,  258,  258,    0,  258,    0,  275,  258,  258,
      260,  275,    0,    0,  260,  266,  266,  266,  266,    0,
      287,  258,  267,  275,  287,    0,  260,    0,  266,    0,
        0,  267,  266,  267,    0,    0,  287,  267,  270,  270,
      270,  270,    0,    0,  266,    0,  267,  272,  272,  272,
      272,  270,    0,    0,    0,  270,  278,  278,  278,  278,
      272,    0,    0,    0,  272,    0,  286,  270,    0,  278,
      288,    0,  286,  278,  288,  286,  272,  273,  273,  273,
      273,  286,    0,    0,    0,  278,  288,  299,  273,  301,

      273,  299,    0,  301,  273,  289,  289,  289,  289,  290,
      290,  290,  290,  299,    0,  301,  273,  277,  277,  277,
      277,  309,  290,    0,    0,  309,  290,  310,  277,  312,
      277,  310,    0,  312,  277,    0,    0,  309,  290,  292,
      292,  292,  292,  310,    0,  312,  277,  280,  280,  280,
      280,    0,  292,    0,    0,    0,  292,    0,  294,  280,
      280,    0,    0,  280,  280,    0,    0,  294,  292,  294,
        0,    0,  280,  294,    0,    0,  280,  281,  281,  281,
      281,    0,  294,    0,  302,  302,  302,  302,  281,  316,
      281,    0,    0,  316,  281,  302,  318,  318,  318,  318,

      330,  330,  330,  330,    0,  316,  281,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  284,  284,  284,  284,  284,
        0,  293,  293,  293,  293,    0,    0,  317,  319,  284,
        0,  317,  319,  284,  293,    0,    0,    0,  293,  295,
      295,  295,  295,  317,  319,  284,  300,  300,  300,  300,
      293,    0,  295,    0,    0,    0,  295,  326,  327,  300,

        0,  326,  327,  300,  307,  307,  307,  307,  295,  296,
      296,  296,  296,  326,  327,  300,    0,  307,    0,  329,
      296,  307,  296,  329,    0,    0,  296,  347,  347,  347,
      347,    0,  333,  307,    0,  329,  333,    0,  296,  298,
      298,  298,  298,  332,  332,  332,  332,    0,  333,  334,
        0,  298,  298,  334,  332,    0,  298,  349,  349,  349,
      349,    0,    0,    0,  298,  334,    0,    0,  298,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,

      304,  304,  304,  304,  304,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  305,  305,  305,
      305,  305,    0,  311,  311,  311,  311,    0,    0,  335,
      345,  305,    0,  335,  345,  305,  311,    0,    0,    0,
      311,  313,  313,  313,  313,  335,  345,  305,  314,  314,
      314,  314,  311,  346,  313,    0,    0,  346,  313,  348,
      350,  314,    0,  348,  350,  314,    0,    0,    0,  346,
      313,  325,  325,  325,  325,  348,  350,  314,  315,  315,
      315,  315,  351,  352,  325,    0,  351,  352,  325,  315,
      364,  315,    0,    0,  364,  315,    0,    0,  351,  352,

      325,  386,  386,  386,  386,    0,  364,  315,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  320,  320,  320,  320,
      320,  320,  320,  320,  320,  320,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  322,  322,  322,  322,  322,    0,
      328,  328,  328,  328,    0,    0,  365,  366,  322,    0,
      365,  366,  322,  328,    0,    0,    0,  328,  331,  331,
      331,  331,  365,  366,  322,  324,  324,  324,  324,  328,
      367,  331,    0,  368,  367,  331,  324,  368,  324,    0,
        0,    0,  324,    0,    0,    0,  367,  331,    0,  368,
      397,  397,  397,  397,  324,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,

      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  337,  337,  337,  337,  337,  378,  379,
        0,    0,  378,  379,    0,    0,    0,  337,    0,    0,
        0,  337,    0,    0,  378,  379,  399,  399,  399,  399,
        0,    0,    0,  337,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  340,  340,  340,  340,  340,    0,  342,  342,

      342,  342,  392,  392,  392,  392,  340,    0,    0,    0,
      340,  342,    0,  392,    0,  342,  402,  402,  402,  402,
        0,    0,  340,  344,  344,  344,  344,  342,  343,  343,
      343,  343,  401,  401,  401,  401,  344,    0,    0,  343,
      344,  343,    0,  401,    0,  343,  403,  403,  403,  403,
        0,    0,  344,  356,  356,  356,  356,  343,  354,  354,
      354,  354,  354,    0,    0,    0,  356,    0,    0,    0,
      356,    0,  354,    0,    0,    0,  354,    0,    0,    0,
        0,    0,  356,  361,  361,  361,  361,    0,  354,  358,
      358,  358,  358,  358,    0,    0,  361,    0,    0,    0,

      361,    0,    0,  358,    0,    0,    0,  358,    0,    0,
        0,    0,  361,  363,  363,  363,  363,    0,    0,  358,
      360,  360,  360,  360,    0,    0,  363,    0,    0,    0,
      363,  360,    0,  360,    0,    0,    0,  360,    0,    0,
        0,    0,  363,  370,  370,  370,  370,    0,    0,  360,
      362,  362,  362,  362,    0,    0,  370,    0,    0,    0,
      370,  362,    0,  362,    0,    0,    0,  362,  371,  371,
      371,  371,  370,  373,  373,  373,  373,    0,    0,  362,
        0,  371,    0,    0,    0,  371,  373,    0,    0,    0,
      373,    0,    0,    0,    0,    0,    0,  371,  375,  375,

      375,  375,  373,  374,  374,  374,  374,    0,    0,    0,
        0,  375,    0,    0,  374,  375,  374,    0,    0,    0,
      374,    0,    0,    0,    0,    0,    0,  375,  377,  377,
      377,  377,  374,  376,  376,  376,  376,    0,    0,    0,
        0,  377,    0,    0,  376,  377,  376,    0,    0,    0,
      376,  380,  380,  380,  380,    0,    0,  377,  381,  381,
      381,  381,  376,    0,  380,    0,    0,    0,  380,    0,
        0,  381,    0,    0,    0,  381,  382,  382,  382,  382,
      380,  384,  384,  384,  384,    0,    0,  381,    0,  382,
        0,    0,    0,  382,  384,    0,    0,    0,  384,  387,

      387,  387,  387,    0,    0,  382,  383,  383,  383,  383,
      384,    0,  387,    0,    0,    0,  387,  383,    0,  383,
        0,    0,    0,  383,    0,    0,    0,    0,  387,  388,
      388,  388,  388,    0,    0,  383,  385,  385,  385,  385,
        0,    0,  388,    0,    0,    0,  388,  385,    0,  385,
        0,    0,    0,  385,  389,  389,  389,  389,  388,  391,
      391,  391,  391,    0,    0,  385,    0,  389,    0,    0,
        0,  389,  391,    0,    0,    0,  391,  393,  393,  393,
      393,    0,    0,  389,  390,  390,  390,  390,  391,    0,
      393,    0,    0,    0,  393,  390,    0,  390,    0,    0,

        0,  390,  394,  394,  394,  394,  393,  395,  395,  395,
      395,    0,    0,  390,    0,  394,    0,    0,    0,  394,
      395,    0,    0,    0,  395,    0,    0,    0,    0,    0,
        0,  394,  398,  398,  398,  398,  395,  396,  396,  396,
      396,    0,    0,    0,    0,  398,    0,    0,  396,  398,
      396,    0,    0,    0,  396,  400,  400,  400,  400,    0,
        0,  398,    0,    0,    0,    0,  396,    0,  400,    0,
        0,    0,  400,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  400,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  406,  406,  406,  406,  406,  406,

      406,  406,  406,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  408,  408,  408,  408,  408,  408,  408,  408,
      408,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      410,  410,  410,  410,  410,  410,  410,  410,  410,  411,
      411,  411,  411,  411,  411,  411,  411,  411,  412,  412,
      412,  412,  412,  412,  412,  412,  412,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  414,  414,  414,  414,
      414,  414,  414,  414,  414,  415,  415,  415,  415,  415,
      415,  415,  415,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  417,  417,  417,  417,  417,  417,  417,  417,

      417,  418,  418,  418,  418,  418,  418,  418,  418,  418,
      419,  419,    0,  419,  419,  419,  419,    0,  419,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  421,  421,
      421,  421,  421,  421,  421,  421,  421,  422,  422,  422,
      422,  422,  422,  422,  422,  422,  423,  423,    0,  423,
      423,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  427,  427,
      427,  427,  427,  427,  427,  427,  427,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  429,  429,  429,  429,

      429,  429,  429,  429,  429,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  431,    0,    0,    0,  431,  432,
      432,  432,  432,  432,  432,  432,  432,  433,  433,  433,
      433,  433,  433,  433,  433,  433,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  436,  436,  436,  436,  436,  437,
        0,    0,    0,  437,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  439,  439,  439,  439,  439,  439,  439,
      439,  439,  440,  440,  440,  440,  440,  440,  440,  440,
      441,    0,  441,  441,  441,  442,    0,  442,    0,  442,

      443,  443,  443,  443,  443,  443,  443,  443,  444,  444,
      444,  444,  444,  444,  444,  444,  445,  445,  445,  445,
      445,  445,  445,  445,  446,  446,  446,  446,  446,  446,
      446,  446,  447,  447,  447,  447,  447,  447,  447,  447,
      447,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  454,  454,  454,  454,  454,

      454,  454,  454,  454,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      404,  404,  404
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
/*
 * match unicode characters as one rule instead of each byte.
 * http://stackoverflow.com/questions/10252777/making-lex-to-read-utf-8-doesnt-work?lq=1
*/
/*
 * Greatly improves parser speed by passing whole phrases instead of chars
*/
#line 1253 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/lex.xng_markdown.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int xng_markdownlex_init (yyscan_t* scanner);

int xng_markdownlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int xng_markdownlex_destroy (yyscan_t yyscanner );

int xng_markdownget_debug (yyscan_t yyscanner );

void xng_markdownset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE xng_markdownget_extra (yyscan_t yyscanner );

void xng_markdownset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *xng_markdownget_in (yyscan_t yyscanner );

void xng_markdownset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *xng_markdownget_out (yyscan_t yyscanner );

void xng_markdownset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t xng_markdownget_leng (yyscan_t yyscanner );

char *xng_markdownget_text (yyscan_t yyscanner );

int xng_markdownget_lineno (yyscan_t yyscanner );

void xng_markdownset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int xng_markdownwrap (yyscan_t yyscanner );
#else
extern int xng_markdownwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int xng_markdownlex (yyscan_t yyscanner);

#define YY_DECL int xng_markdownlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 57 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"


#line 1478 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/lex.xng_markdown.c"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			xng_markdownensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				xng_markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		xng_markdown_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 405 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3005 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 59 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_EM, yyscanner);}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 60 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_STRONG, yyscanner);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_STRONGEM, yyscanner);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_STRIKETHROUGH, yyscanner);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_CODESPAN, yyscanner);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 64 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_HEADER, yyscanner);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 65 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_MULTILINEHEADER, yyscanner);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 66 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_URL, yyscanner);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 67 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_HREF, yyscanner);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 68 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_BULLETSTART, yyscanner);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_PHRASE, yyscanner);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_WORD, yyscanner);}
	YY_BREAK
case 13:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 72 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_NEWLINE, yyscanner);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 73 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_PARAGRAPH, yyscanner);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 74 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_UNKNOWN, yyscanner);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_UNKNOWN, yyscanner);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_UNKNOWN, yyscanner);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"
ECHO;
	YY_BREAK
#line 1667 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/lex.xng_markdown.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * xng_markdownlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( xng_markdownwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of xng_markdownlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					xng_markdownrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			xng_markdownrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) xng_markdownrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 405 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 405 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 404);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					xng_markdownrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( xng_markdownwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void xng_markdownrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        xng_markdownensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            xng_markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	xng_markdown_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	xng_markdown_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void xng_markdown_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		xng_markdownpop_buffer_state();
	 *		xng_markdownpush_buffer_state(new_buffer);
     */
	xng_markdownensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	xng_markdown_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (xng_markdownwrap()) processing, but the only time this flag
	 * is looked at is after xng_markdownwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void xng_markdown_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE xng_markdown_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) xng_markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in xng_markdown_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) xng_markdownalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in xng_markdown_create_buffer()" );

	b->yy_is_our_buffer = 1;

	xng_markdown_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with xng_markdown_create_buffer()
 * @param yyscanner The scanner object.
 */
    void xng_markdown_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		xng_markdownfree((void *) b->yy_ch_buf ,yyscanner );

	xng_markdownfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a xng_markdownrestart() or at EOF.
 */
    static void xng_markdown_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	xng_markdown_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then xng_markdown_init_buffer was _probably_
     * called from xng_markdownrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void xng_markdown_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		xng_markdown_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void xng_markdownpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	xng_markdownensure_buffer_stack(yyscanner);

	/* This block is copied from xng_markdown_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from xng_markdown_switch_to_buffer. */
	xng_markdown_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void xng_markdownpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	xng_markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		xng_markdown_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void xng_markdownensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)xng_markdownalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in xng_markdownensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)xng_markdownrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in xng_markdownensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE xng_markdown_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) xng_markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in xng_markdown_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	xng_markdown_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to xng_markdownlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       xng_markdown_scan_bytes() instead.
 */
YY_BUFFER_STATE xng_markdown_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return xng_markdown_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to xng_markdownlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE xng_markdown_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) xng_markdownalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in xng_markdown_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = xng_markdown_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in xng_markdown_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE xng_markdownget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int xng_markdownget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int xng_markdownget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *xng_markdownget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *xng_markdownget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t xng_markdownget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *xng_markdownget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void xng_markdownset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void xng_markdownset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "xng_markdownset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void xng_markdownset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "xng_markdownset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see xng_markdown_switch_to_buffer
 */
void xng_markdownset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void xng_markdownset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int xng_markdownget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void xng_markdownset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* xng_markdownlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int xng_markdownlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) xng_markdownalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* xng_markdownlex_init_extra has the same functionality as xng_markdownlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to xng_markdownalloc in
 * the yyextra field.
 */

int xng_markdownlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    xng_markdownset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) xng_markdownalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    xng_markdownset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from xng_markdownlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * xng_markdownlex_init()
     */
    return 0;
}

/* xng_markdownlex_destroy is for both reentrant and non-reentrant scanners. */
int xng_markdownlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		xng_markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		xng_markdownpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	xng_markdownfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        xng_markdownfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * xng_markdownlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    xng_markdownfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *xng_markdownalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *xng_markdownrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void xng_markdownfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see xng_markdownrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 78 "/Users/jose.alcala/code/XNGMarkdownParser/Example/../grammar/markdown.grammar"



int xng_markdownwrap(yyscan_t yyscanner){return 1;}

