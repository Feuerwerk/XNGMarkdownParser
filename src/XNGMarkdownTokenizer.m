//
// Copyright 2011-2014 NimbusKit
// Copyright 2014 XING AG
//
// Autogenerated by flex using Jeff Verkoeyen's Markdown grammar
// with additions by XING AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#define YY_NO_INPUT

#include "XNGMarkdownTokens.h"

#line 3 "lex.xng_markdown.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE xng_markdownrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via xng_markdownrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void xng_markdownrestart (FILE *input_file ,yyscan_t yyscanner );
void xng_markdown_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE xng_markdown_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void xng_markdown_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void xng_markdown_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void xng_markdownpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void xng_markdownpop_buffer_state (yyscan_t yyscanner );

static void xng_markdownensure_buffer_stack (yyscan_t yyscanner );
static void xng_markdown_load_buffer_state (yyscan_t yyscanner );
static void xng_markdown_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER xng_markdown_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE xng_markdown_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE xng_markdown_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE xng_markdown_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *xng_markdownalloc (yy_size_t ,yyscan_t yyscanner );
void *xng_markdownrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void xng_markdownfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer xng_markdown_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        xng_markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            xng_markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        xng_markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            xng_markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 18
#define YY_END_OF_BUFFER 19
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[327] =
    {   0,
       16,   16,   19,   17,   15,   15,   17,   17,   17,   12,
       12,   12,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,    0,    0,   15,   15,
       15,   14,   11,   11,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    1,    0,    0,    0,   11,   11,
       12,    0,    0,    0,    0,    0,    0,    0,   12,   12,
        0,    0,    0,    0,    0,    0,    0,    1,    0,    5,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    6,
        0,   10,    0,    0,   14,   13,   11,    0,    0,    0,
        0,    0,    0,    1,    0,    1,    0,    0,    0,    0,

        8,    0,    0,    0,    0,    0,    0,    0,   12,   12,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    6,    0,    0,    7,    0,
        0,    0,    7,    0,    0,    0,    0,    0,    0,    2,
        8,    8,    0,    8,    8,    0,    0,    0,    0,   12,
       12,    0,    7,    0,    0,    0,    0,    0,    0,    7,
        0,    0,    0,    0,    0,    0,    2,    4,    6,    0,
        2,    2,    7,    0,    0,    0,    0,    0,    8,    0,
        8,    8,    8,    8,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    8,    0,    0,    0,    0,    7,
        0,    0,    0,    0,    0,    0,    0,    7,    3,    8,
        8,    8,    8,    8,    8,    8,    0,    8,    0,    9,
        9,    0,    0,    9,    9,    8,    8,    0,    0,    7,
        0,    0,    3,    8,    8,    8,    8,    0,    8,    8,
        8,    8,    8,    8,    7,    0,    8,    0,    0,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    7,
        8,    0,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    0,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    0,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    6,    7,    6,    6,    6,    6,    8,
        9,   10,    6,   11,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,    6,
       18,    6,    6,    6,   15,   15,   15,   15,   15,   19,
       20,   21,   20,   20,   20,   22,   20,   22,   20,   23,
       20,   20,   24,   25,   20,   20,   20,   20,   20,   20,
       26,   27,   28,    6,   29,   30,   15,   15,   15,   15,

       15,   31,   20,   32,   20,   20,   20,   22,   20,   22,
       20,   33,   20,   20,   34,   35,   20,   20,   20,   20,
       20,   20,   36,    6,   36,   37,    1,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   41,   41,   42,   42,   42,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   43,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   45,   44,   44,   46,
       47,   47,   47,   48,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    1,    1,    1,    2,    2,    3,    2,    2,    2,
        2,    4,    5,    6,    4,    2,    2,    5,    4,    4,
        4,    7,    4,    4,    4,    8,    4,    2,    2,    2,
        4,    4,    4,    4,    4,    3,    2,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4
    } ;

static yyconst flex_int16_t yy_base[367] =
    {   0,
        0,   42,  940,  933,   48,   50,   54,  100,  110,  154,
      135,  137,  165,  202,  161,  163,  158,   66,  885,   69,
      142,  143,  169,  885,  207,  206,  914,  201,  213,  220,
      222,  224,  225,  904,  900,  209,  191,  217,  231,  232,
      236,  239,  234,  240,  243,    0,  277,  325,  898,    0,
        0,  221,  856,  224,  202,  226,  292,  857,  310,  310,
      331,  324,  334,    0,  345,  336,  351,  338,  343,  351,
      335,  340,  339,  351,  354,  357,  360,  363,  401,  233,
      402,  889,  363,  403,  265,  395,  350,  407,  411,  414,
      417,  422,  425,  883,  861, 2029,  423,  408,  422,  409,

      465,  513,  391,  404,  480,  483,  486,  491,  511,  425,
      530,  343,  534,  513,  526,  537,  563,  837,  557,  544,
      530,  548,  533,  560,  541,  824,  545,  533,  548,  551,
      825,  560,  563,  566,  843,  839,  604,  589, 2029,  590,
      605,  609,  821,  607,  816,  802,  621,  610,  609,  631,
        0,  649,  697,    0,  700,  597,  668,  671,  413,  787,
      698,  714,  587,  709,  721,  762,  605,  728,  747,  745,
      717,  738,  726,  735,  724,  742,  727,  742,  722,  754,
      718, 2029,  632,  755,  628,  616,  765,  760,    0,  783,
        0,  789,  783,  813,  766,  779,  812,  637,  820,  824,

      827,  600,  772,  832,  843,  794,  849,  875,  870,  566,
      808,  514,  879,  430,  816,  862,  429,  426,  419,    0,
      907,  901,  927,  921,  699,  831,  868,  947,  978,  917,
      745, 1024,  909,  371, 2029,  951, 1051,  885, 1026,  337,
      244,  934, 2029,  941, 1056, 1074,  808,  942, 1031, 1081,
     1099,  571,  241, 1130, 1064, 1104,  945, 1049, 1035, 1124,
     1106, 1150,  854, 1180, 1109, 1155, 1211,  171, 1258,  154,
     1131, 1148, 1173, 1263, 1149, 1172, 1281, 1294, 1342, 1372,
     1174, 1257, 1347, 1288, 1339, 1340,    0, 1403, 1451,    0,
     1456, 1486, 1341, 1348, 1378, 1369, 1371,    0, 1517,    0,

     1481, 1511, 1547, 1448, 1449, 1450,    0, 1542, 1565, 1572,
     1602, 1478, 1595, 1620, 1625, 1551, 1643, 1650, 1668, 1673,
     1691, 1390, 1698, 1394, 1535, 2029, 1729, 1737, 1745, 1753,
     1761, 1769, 1777, 1785, 1793, 1801, 1808, 1816, 1824, 1832,
     1840, 1848, 1856, 1861, 1868, 1876, 1884, 1892, 1900, 1908,
     1913, 1919, 1927, 1935, 1940, 1947, 1955, 1962, 1967, 1973,
     1980, 1988, 1996, 2004, 2012, 2020
    } ;

static yyconst flex_int16_t yy_def[367] =
    {   0,
      326,    1,  326,  327,  327,  326,  326,  328,  326,    9,
       10,   10,  329,  330,  331,  332,  327,    9,    9,    9,
        9,    9,    9,    9,  333,    9,  327,  326,  327,  326,
      326,  326,    7,  327,    7,  327,  327,  327,  327,  327,
      327,  327,  328,  334,  335,    9,  326,  330,    7,   47,
       10,    9,    9,    9,    9,    9,    9,    9,   10,   10,
      329,  336,  329,    9,    9,  331,  337,  338,  332,  332,
      339,   10,    9,    9,    9,    9,    9,    9,  333,  340,
      333,  327,    9,  326,  326,  326,    7,  327,  327,  327,
      327,  327,  327,  327,  334,  326,  334,  335,  341,  342,

      326,  343,    9,    9,    9,    9,    9,    9,   10,   10,
      329,  336,  336,  336,  336,  344,    9,  337,  337,  338,
      345,  346,  339,  339,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,  340,  340,  340,  333,  326,  327,
      327,  327,  334,  327,  341,  326,  341,  342,  347,  327,
      101,  326,  348,  101,  101,    9,    9,    9,  327,   10,
       10,  349,  336,  350,  344,  351,  344,  352,    9,  337,
      327,  345,  345,  326,  346,  353,  327,  339,  340,  333,
      327,  326,  341,  327,  347,  326,  347,  327,  152,  354,
      101,  101,  355,  101,  327,  349,  350,  356,  349,  349,

      350,  357,  350,  350,  355,  358,  344,  344,    9,  345,
      327,  353,  353,  326,  327,  333,  326,  347,  327,  152,
      152,  355,  101,  355,  359,  224,  360,  101,  326,  329,
      336,  350,  357,  327,  326,  224,  224,  208,    9,  353,
      326,  333,  326,  359,  152,  101,  359,  361,  224,  237,
      101,  362,  229,  363,  350,  357,  237,  208,    9,  359,
      152,  101,  359,  359,  250,  101,  326,  229,  229,  357,
      237,  208,  152,  101,  264,  250,  101,  326,  364,  229,
      237,  208,  152,  101,  264,  250,  278,  326,  365,  278,
      278,  229,  237,  208,  152,  264,  250,  288,  366,  278,

      278,  278,  229,  237,  264,  250,  288,  288,  278,  278,
      229,  264,  288,  278,  278,  229,  288,  278,  278,  288,
      278,  278,  288,  278,  288,    0,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326
    } ;

static yyconst flex_int16_t yy_nxt[2078] =
    {   0,
        4,    5,    6,    4,    7,    4,    4,    4,    4,    8,
        4,    9,    4,    4,   10,    4,    4,    4,   11,   10,
       12,   10,   10,   10,   10,   13,   14,    4,   15,   16,
       11,   12,   10,   10,   10,    4,   17,    9,    9,    9,
        9,   18,   19,   20,   21,   22,   23,   24,   25,   29,
       30,   31,   32,   26,   27,   27,   28,   27,   33,   27,
       27,   27,   27,   27,   34,   27,   34,   27,   35,   27,
       34,   27,   35,   35,   35,   35,   35,   35,   35,   27,
       27,   27,   27,   27,   35,   35,   35,   35,   35,   27,
       27,   27,   27,   27,   27,   36,   37,   38,   39,   40,

       41,   42,   44,   72,   72,   72,   74,   74,   74,   45,
       27,   27,   28,   27,   27,   27,   27,   27,   27,   27,
       27,   46,   47,   27,   46,   27,   27,   27,   46,   46,
       46,   46,   46,   46,   46,   27,   48,   27,   27,   27,
       46,   46,   46,   46,   46,   27,   27,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   49,   59,
       28,   60,  235,   67,   34,   28,   50,   62,   51,   59,
       34,   60,   51,   51,   51,   51,   51,   51,   51,   75,
       75,   76,   76,  267,   51,   51,   51,   51,   51,   68,
       27,   63,   70,   28,   71,   52,   53,   54,   55,   56,

       57,   58,   27,   27,   28,   27,   77,   77,   77,   80,
       82,   28,   84,   81,   29,   30,   65,   83,   84,   28,
       65,   31,   31,   31,   31,   31,   85,   86,   27,   87,
       88,   84,   65,   28,   28,  136,   44,   84,   28,  105,
      105,   28,   27,   94,  137,   99,   35,   35,   35,   96,
      137,   97,  100,  267,   89,   89,   89,   97,   51,   51,
       51,  104,  104,  104,  106,  106,   31,   85,   90,   90,
       91,   91,  243,   92,   92,   92,   93,   27,   27,   28,
       27,   27,   27,   27,   27,   27,   27,   27,  101,   27,
       27,  101,   27,   27,   27,  101,  101,  101,  101,  101,

      101,  101,   27,  102,   27,   27,   27,  101,  101,  101,
      101,  101,   27,   27,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,   27,   27,   28,   27,  107,
      107,  107,  109,   62,  110,  113,   62,   28,   67,   65,
      121,  113,  109,   65,  110,   28,   64,  116,   64,   64,
      114,  115,   86,   28,   87,   65,   27,   63,  111,  117,
       63,  111,  119,  117,   94,  214,  122,   82,  119,  114,
      115,  124,   70,   28,   83,  117,   72,   72,   72,   96,
       70,  125,  126,  127,  128,  129,  130,  131,   72,   72,
       72,   72,   72,   72,  132,  132,  132,  133,  133,  133,

      134,  134,  134,   80,   80,  139,   84,   27,  138,   28,
       99,  149,   84,   28,   84,   28,   28,  144,  150,   28,
       84,   28,   27,   27,   28,  143,  195,   28,   51,   51,
       51,  146,   96,  147,   97,  186,   27,   27,  243,  147,
       97,   51,   51,   51,   35,   35,   35,  161,   35,   35,
       35,   35,   35,   35,  140,  140,  140,  161,  241,  141,
      141,  141,  142,  142,  142,   27,   27,   28,   27,   27,
       27,   27,   27,   27,   27,   27,  151,   47,  152,  151,
       27,   27,   27,  151,  151,  151,  151,  151,  151,  151,
       27,  153,   27,   27,   27,  151,  151,  151,  151,  151,

       27,   27,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,   27,   27,   28,   27,   51,   51,   51,
      156,  156,  156,  157,  157,  157,  159,  155,  158,  158,
      158,  155,   62,  164,  160,   28,  163,  162,  112,  114,
      115,  173,  214,  155,  160,  113,  121,  173,  165,  166,
      176,  113,  114,  115,   84,   27,   63,  111,  174,  170,
      114,  115,   28,  168,   64,  116,   64,   64,  119,  124,
       75,   75,  171,   28,  119,   27,  177,  169,   72,   72,
       72,  169,   74,   74,   74,   96,   76,   76,   77,   77,
       77,   80,   28,  169,  174,  180,  178,   72,   72,   72,

       72,   72,   72,   72,   72,   72,  179,   28,  235,   28,
       27,   28,  149,  114,  115,  137,  181,  166,  186,  184,
      187,  137,  326,  183,   27,  217,  187,   35,   35,   35,
      146,  168,  147,   28,   51,   51,   51,  186,  147,  233,
      188,  146,   35,   35,   35,  234,   35,   35,   35,   27,
       27,   28,   27,   27,   27,   27,   27,   27,   27,   27,
      189,   27,  152,  189,   27,   27,   27,  189,  189,  189,
      189,  189,  189,  189,   27,  190,   27,   27,   27,  189,
      189,  189,  189,  189,   27,   27,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,   27,   27,   28,

       27,  154,  193,  154,  154,   51,   51,   51,   51,   51,
       51,  192,  225,  159,  194,  192,  197,  112,  194,   28,
       28,  160,   61,  139,  136,  248,  176,  192,  210,   28,
      194,  160,  165,  166,  202,  203,  204,  173,   84,  198,
      199,  200,  208,  173,   28,  181,  208,  168,   64,  116,
       64,   64,  211,  213,  174,  215,   80,   28,  208,  213,
      216,  209,   28,  182,  188,  209,  174,  218,   28,  219,
      214,  114,  115,   96,  186,   27,  187,  209,  178,  229,
      231,  197,  187,   27,   27,   28,   27,  230,  206,   27,
      191,  222,  191,  191,  224,  166,  225,  221,  203,  204,

       84,  221,  159,  223,  198,  199,  200,  223,  237,  227,
       28,  182,  237,  221,  154,  193,  154,  154,   28,  223,
      231,  225,  197,  232,  237,  146,  197,  228,  230,  232,
       96,  228,  230,  326,  248,  231,  215,  202,  203,  204,
      231,  136,  226,  228,  219,  136,  199,  200,  326,  198,
      199,  200,  202,  203,  204,  166,  225,  202,  203,  204,
      326,  166,   78,   73,   80,   96,  326,  225,  242,  227,
       96,   64,  116,   64,   64,  168,  207,  207,  207,  207,
      248,  240,  250,   27,  239,   28,  250,  166,  239,  238,
      213,   28,  326,  238,  108,  103,  213,   27,  250,  258,

      239,  168,   49,  258,   49,  238,   28,  214,  220,  244,
      220,  220,  224,  166,  225,  258,   28,  235,   84,   62,
      256,  245,   78,  139,   73,  245,  256,  227,  191,  222,
      191,  191,  224,  166,  225,   28,   80,  245,   84,  326,
       27,  246,   27,   63,  111,  246,  326,  227,  154,  193,
      154,  154,  260,  326,  225,   27,  264,  246,   84,  271,
      264,  251,  226,  271,  326,  251,  326,  248,  326,   27,
      326,  326,  264,  326,  326,  271,  326,  251,  252,  252,
       28,  252,   27,  252,  252,  252,  252,  252,  252,  253,
      252,  252,  253,  252,  252,  252,  253,  253,  253,  253,

      253,  253,  253,  252,  254,  252,  252,  252,  253,  253,
      253,  253,  253,  252,  252,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  255,   64,  116,   64,
       64,  326,  231,  326,  326,  232,   64,  116,   64,   64,
      259,  232,  226,  326,  259,  326,  326,  326,  326,  202,
      203,  204,  236,  236,  236,  236,  259,  220,  244,  220,
      220,  326,  226,  272,  326,  257,  326,  272,  326,  257,
      261,  326,  231,  326,  261,  191,  222,  191,  191,  272,
      326,  257,  249,  249,  249,  249,  261,  326,  262,  202,
      203,  204,  262,  326,  326,  265,  326,  326,  326,  265,

      154,  193,  154,  154,  262,  326,  270,  220,  244,  220,
      220,  265,  235,  266,  326,  256,  326,  266,  326,  326,
      273,  256,  326,  276,  273,  326,  139,  276,  326,  266,
      252,  252,   28,  252,   64,  260,  273,  225,  326,  276,
      326,   84,  326,  326,  269,  281,  326,  326,  269,  281,
      248,  191,  222,  191,  191,  326,  154,  193,  154,  154,
      269,  281,  282,  285,  274,  326,  282,  285,  274,  277,
      326,  326,  326,  277,  220,  244,  220,  220,  282,  285,
      274,  263,  263,  263,  263,  277,  286,  283,  293,  326,
      286,  283,  293,  225,  275,  326,  326,  326,  275,  326,

      326,  326,  286,  283,  293,  326,  248,  326,  326,  326,
      275,  252,  252,   28,  252,   27,  252,  252,  252,  252,
      252,  252,  278,  252,  252,  278,  252,  252,  252,  278,
      278,  278,  278,  278,  278,  278,  252,  279,  252,  252,
      252,  278,  278,  278,  278,  278,  252,  252,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  268,
      116,  268,   64,  326,  191,  222,  191,  191,  326,  326,
      267,  294,  280,  326,  326,  294,  280,  284,  326,  326,
      326,  284,  154,  193,  154,  154,  326,  294,  280,  191,
      222,  191,  191,  284,  252,  252,   28,  252,   27,  252,

      252,  252,  252,  252,  252,  287,  267,  288,  287,  252,
      252,  252,  287,  287,  287,  287,  287,  287,  287,  252,
      289,  252,  252,  252,  287,  287,  287,  287,  287,  252,
      252,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  252,  252,   28,  252,  154,  326,  220,  244,
      220,  220,  326,  296,  297,  304,  291,  296,  297,  304,
      291,  295,  167,  326,  326,  295,  167,  326,  326,  296,
      297,  304,  291,  268,  116,  268,   64,  295,  167,  220,
      244,  220,  220,  305,  267,  306,  292,  305,  326,  306,
      292,  290,  193,  290,  154,  300,  222,  300,  191,  305,

      326,  306,  292,  252,  252,   28,  252,   27,  252,  252,
      252,  252,  252,  252,  298,  252,  288,  298,  252,  252,
      252,  298,  298,  298,  298,  298,  298,  298,  252,  299,
      252,  252,  252,  298,  298,  298,  298,  298,  252,  252,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  252,  252,   28,  252,  191,  326,  290,  193,  290,
      154,  326,  226,  312,  226,  301,  226,  312,  226,  301,
      302,  326,  326,  326,  302,  326,  326,  326,  226,  312,
      226,  301,  300,  222,  300,  191,  302,  268,  116,  268,
       64,  326,  247,  326,  326,  309,  247,  326,  267,  309,

      303,  326,  326,  326,  303,  326,  326,  326,  247,  326,
      326,  309,  290,  193,  290,  154,  303,  252,  252,   28,
      252,  220,  326,  326,  326,  310,  326,  326,  326,  310,
      326,  308,  326,  326,  326,  308,  307,  244,  307,  220,
      326,  310,  326,  307,  244,  307,  220,  308,  268,  116,
      268,   64,  268,  116,  268,   64,  313,  326,  326,  267,
      313,  311,  326,  267,  326,  311,  300,  222,  300,  191,
      326,  326,  313,  290,  193,  290,  154,  311,  326,  314,
      326,  326,  326,  314,  326,  326,  315,  326,  326,  326,
      315,  326,  326,  326,  326,  314,  307,  244,  307,  220,

      326,  326,  315,  268,  116,  268,   64,  326,  326,  317,
      326,  326,  326,  317,  267,  326,  316,  326,  326,  326,
      316,  300,  222,  300,  191,  317,  290,  193,  290,  154,
      326,  326,  316,  326,  318,  326,  326,  326,  318,  319,
      326,  326,  326,  319,  307,  244,  307,  220,  326,  326,
      318,  300,  222,  300,  191,  319,  326,  320,  326,  326,
      326,  320,  326,  326,  321,  326,  326,  326,  321,  290,
      193,  290,  154,  320,  307,  244,  307,  220,  326,  326,
      321,  326,  322,  326,  326,  326,  322,  323,  326,  326,
      326,  323,  300,  222,  300,  191,  326,  326,  322,  307,

      244,  307,  220,  323,  326,  324,  326,  326,  326,  324,
      326,  326,  325,  326,  326,  326,  325,  326,  326,  326,
      326,  324,  326,  326,  326,  326,  326,  326,  325,   27,
       27,   27,   27,   27,   27,   27,   27,   43,   43,   43,
       43,   43,   43,   43,   43,   61,   61,   61,   61,   61,
       61,   61,   61,   64,   64,   64,   64,   64,   64,   64,
       64,   66,   66,   66,   66,   66,   66,   66,   66,   69,
       69,   69,   69,   69,   69,   69,   69,   79,   79,   79,
       79,   79,   79,   79,   79,   95,   95,   95,   95,   95,
       95,   95,   95,   98,   98,   98,   98,   98,   98,   98,

       98,  112,  112,  112,  112,  112,  112,  112,  118,  118,
      118,  118,  118,  118,  118,  118,  120,  120,  120,  120,
      120,  120,  120,  120,  123,  123,  123,  123,  123,  123,
      123,  123,  135,  135,  326,  135,  135,  135,  326,  135,
      145,  145,  145,  145,  145,  145,  145,  145,  148,  148,
      148,  148,  148,  148,  148,  148,  154,  154,  154,  154,
      154,  154,  154,  154,  167,  167,  326,  167,  172,  172,
      172,  172,  172,  172,  172,  172,  175,  175,  175,  175,
      175,  175,  175,  175,  185,  185,  185,  185,  185,  185,
      185,  185,  191,  191,  191,  191,  191,  191,  191,  191,

      196,  196,  196,  196,  196,  196,  196,  196,  201,  201,
      201,  201,  201,  201,  201,  201,  205,  326,  326,  205,
      207,  207,  207,  207,  207,  207,  207,  212,  212,  212,
      212,  212,  212,  212,  212,  220,  220,  220,  220,  220,
      220,  220,  220,  226,  226,  226,  226,  198,  198,  198,
      198,  198,  198,  198,  198,  202,  202,  202,  202,  202,
      202,  202,  202,  236,  236,  236,  236,  236,  236,  236,
      247,  326,  247,  247,  249,  249,  249,  249,  249,  249,
      249,  263,  263,  263,  263,  263,  263,  263,  252,  252,
      252,  252,  252,  252,  252,  252,  268,  268,  268,  268,

      268,  268,  268,  268,  290,  290,  290,  290,  290,  290,
      290,  290,  300,  300,  300,  300,  300,  300,  300,  300,
      307,  307,  307,  307,  307,  307,  307,  307,    3,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326
    } ;

static yyconst flex_int16_t yy_chk[2078] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    5,
        5,    6,    6,    2,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    8,   18,   18,   18,   20,   20,   20,    8,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,   10,   11,
       17,   12,  270,   15,   10,   16,   10,   13,   10,   11,
       10,   12,   10,   10,   10,   10,   10,   10,   10,   21,
       21,   22,   22,  268,   10,   10,   10,   10,   10,   15,
       13,   13,   16,   37,   17,   10,   10,   10,   10,   10,

       10,   10,   14,   14,   14,   14,   23,   23,   23,   25,
       26,   36,   28,   25,   29,   29,   14,   26,   28,   38,
       14,   30,   30,   31,   31,   32,   32,   33,   25,   33,
       37,   30,   14,   39,   40,   80,   43,   30,   41,   55,
       55,   42,   25,   43,   80,   45,   36,   36,   36,   44,
       80,   44,   45,  253,   38,   38,   38,   44,   52,   52,
       52,   54,   54,   54,   56,   56,   85,   85,   39,   39,
       40,   40,  241,   41,   41,   41,   42,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   48,   48,   48,   48,   57,
       57,   57,   59,   61,   60,   62,   63,   71,   66,   48,
       68,   62,   59,   48,   60,   69,   65,   65,   65,   65,
       62,   62,   87,   70,   87,   48,   61,   61,   61,   65,
       63,   63,   67,   65,   66,  240,   68,   83,   67,  112,
      112,   71,   69,  234,   83,   65,   73,   73,   73,   67,
       70,   72,   72,   72,   72,   72,   72,   72,   74,   74,
       74,   75,   75,   75,   76,   76,   76,   77,   77,   77,

       78,   78,   78,   79,   81,   84,   86,   79,   81,   88,
       98,  100,   86,   89,   84,  159,   90,   98,  100,   91,
       84,  219,   79,   81,   92,   97,  159,   93,  103,  103,
      103,   99,   97,   99,   97,  218,   79,   81,  217,   99,
       97,  104,  104,  104,   88,   88,   88,  110,   89,   89,
       89,   90,   90,   90,   91,   91,   91,  110,  214,   92,
       92,   92,   93,   93,   93,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,

      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  102,  102,  102,  102,  105,  105,  105,
      106,  106,  106,  107,  107,  107,  109,  102,  108,  108,
      108,  102,  111,  115,  109,  123,  113,  111,  114,  114,
      114,  121,  212,  102,  109,  113,  120,  121,  116,  116,
      122,  113,  115,  115,  116,  111,  111,  111,  121,  119,
      113,  113,  124,  116,  117,  117,  117,  117,  119,  123,
      128,  128,  120,  252,  119,  252,  122,  117,  125,  125,
      125,  117,  127,  127,  127,  119,  129,  129,  130,  130,
      130,  138,  140,  117,  210,  138,  124,  132,  132,  132,

      133,  133,  133,  134,  134,  134,  137,  141,  202,  144,
      138,  142,  148,  163,  163,  137,  144,  167,  149,  148,
      149,  137,  167,  147,  138,  186,  149,  140,  140,  140,
      147,  167,  147,  150,  156,  156,  156,  185,  147,  198,
      150,  183,  141,  141,  141,  198,  142,  142,  142,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  153,  153,  153,

      153,  155,  155,  155,  155,  157,  157,  157,  158,  158,
      158,  153,  225,  161,  155,  153,  162,  164,  155,  171,
      181,  161,  162,  165,  179,  225,  175,  153,  173,  177,
      155,  161,  165,  165,  164,  164,  164,  173,  165,  162,
      162,  162,  168,  173,  178,  171,  168,  165,  169,  169,
      169,  169,  175,  176,  173,  177,  180,  184,  168,  176,
      180,  169,  188,  174,  184,  169,  172,  187,  195,  188,
      176,  231,  231,  170,  187,  180,  187,  169,  178,  195,
      203,  196,  187,  190,  190,  190,  190,  196,  166,  180,
      192,  192,  192,  192,  193,  193,  193,  190,  203,  203,

      193,  190,  160,  192,  196,  196,  196,  192,  206,  193,
      211,  146,  206,  190,  194,  194,  194,  194,  215,  192,
      197,  247,  199,  197,  206,  145,  200,  194,  199,  197,
      143,  194,  200,  226,  247,  201,  211,  197,  197,  197,
      204,  136,  226,  194,  215,  135,  199,  199,  226,  200,
      200,  200,  201,  201,  201,  205,  205,  204,  204,  204,
      205,  207,  131,  126,  216,  118,  207,  263,  216,  205,
       95,  209,  209,  209,  209,  207,  208,  208,  208,  208,
      263,  213,  227,  216,  209,   94,  227,  208,  209,  208,
      213,   82,  208,  208,   58,   53,  213,  216,  227,  238,

      209,  208,   49,  238,   35,  208,   34,  213,  221,  221,
      221,  221,  222,  222,  222,  238,   27,  233,  222,  230,
      233,  221,   24,  224,   19,  221,  233,  222,  223,  223,
      223,  223,  224,  224,  224,    4,  242,  221,  224,    3,
      242,  223,  230,  230,  230,  223,    0,  224,  228,  228,
      228,  228,  244,  236,  244,  242,  248,  223,  244,  257,
      248,  228,  236,  257,    0,  228,    0,  244,  236,  242,
        0,    0,  248,    0,    0,  257,    0,  228,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,

      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  232,  239,  239,  239,
      239,    0,  232,  249,    0,  232,  259,  259,  259,  259,
      239,  232,  249,    0,  239,    0,    0,    0,  249,  232,
      232,  232,  237,  237,  237,  237,  239,  245,  245,  245,
      245,    0,  237,  258,    0,  237,    0,  258,  237,  237,
      245,    0,  255,    0,  245,  246,  246,  246,  246,  258,
        0,  237,  250,  250,  250,  250,  245,    0,  246,  255,
      255,  255,  246,    0,    0,  250,    0,    0,    0,  250,

      251,  251,  251,  251,  246,    0,  256,  261,  261,  261,
      261,  250,  256,  251,    0,  256,    0,  251,    0,    0,
      261,  256,    0,  265,  261,    0,  260,  265,    0,  251,
      254,  254,  254,  254,  254,  260,  261,  260,    0,  265,
        0,  260,    0,    0,  254,  271,    0,    0,  254,  271,
      260,  262,  262,  262,  262,    0,  266,  266,  266,  266,
      254,  271,  272,  275,  262,    0,  272,  275,  262,  266,
        0,    0,    0,  266,  273,  273,  273,  273,  272,  275,
      262,  264,  264,  264,  264,  266,  276,  273,  281,    0,
      276,  273,  281,  264,  264,    0,    0,    0,  264,    0,

        0,    0,  276,  273,  281,    0,  264,    0,    0,    0,
      264,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  269,
      269,  269,  269,    0,  274,  274,  274,  274,    0,    0,
      269,  282,  269,    0,    0,  282,  269,  274,    0,    0,
        0,  274,  277,  277,  277,  277,    0,  282,  269,  284,
      284,  284,  284,  274,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  279,  279,  279,  279,  279,    0,  283,  283,
      283,  283,    0,  285,  286,  293,  279,  285,  286,  293,
      279,  283,  294,    0,    0,  283,  294,    0,    0,  285,
      286,  293,  279,  280,  280,  280,  280,  283,  294,  295,
      295,  295,  295,  296,  280,  297,  280,  296,    0,  297,
      280,  322,  322,  322,  322,  324,  324,  324,  324,  296,

        0,  297,  280,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  288,  288,  288,  288,  288,
      288,  289,  289,  289,  289,  289,    0,  291,  291,  291,
      291,    0,  304,  305,  306,  289,  304,  305,  306,  289,
      291,    0,    0,    0,  291,    0,    0,    0,  304,  305,
      306,  289,  301,  301,  301,  301,  291,  292,  292,  292,
      292,    0,  312,    0,    0,  301,  312,    0,  292,  301,

      292,    0,    0,    0,  292,    0,    0,    0,  312,    0,
        0,  301,  302,  302,  302,  302,  292,  299,  299,  299,
      299,  299,    0,    0,    0,  302,    0,    0,    0,  302,
        0,  299,    0,    0,    0,  299,  325,  325,  325,  325,
        0,  302,    0,  308,  308,  308,  308,  299,  303,  303,
      303,  303,  316,  316,  316,  316,  308,    0,    0,  303,
      308,  303,    0,  316,    0,  303,  309,  309,  309,  309,
        0,    0,  308,  310,  310,  310,  310,  303,    0,  309,
        0,    0,    0,  309,    0,    0,  310,    0,    0,    0,
      310,    0,    0,    0,    0,  309,  313,  313,  313,  313,

        0,    0,  310,  311,  311,  311,  311,    0,    0,  313,
        0,    0,    0,  313,  311,    0,  311,    0,    0,    0,
      311,  314,  314,  314,  314,  313,  315,  315,  315,  315,
        0,    0,  311,    0,  314,    0,    0,    0,  314,  315,
        0,    0,    0,  315,  317,  317,  317,  317,    0,    0,
      314,  318,  318,  318,  318,  315,    0,  317,    0,    0,
        0,  317,    0,    0,  318,    0,    0,    0,  318,  319,
      319,  319,  319,  317,  320,  320,  320,  320,    0,    0,
      318,    0,  319,    0,    0,    0,  319,  320,    0,    0,
        0,  320,  321,  321,  321,  321,    0,    0,  319,  323,

      323,  323,  323,  320,    0,  321,    0,    0,    0,  321,
        0,    0,  323,    0,    0,    0,  323,    0,    0,    0,
        0,  321,    0,    0,    0,    0,    0,    0,  323,  327,
      327,  327,  327,  327,  327,  327,  327,  328,  328,  328,
      328,  328,  328,  328,  328,  329,  329,  329,  329,  329,
      329,  329,  329,  330,  330,  330,  330,  330,  330,  330,
      330,  331,  331,  331,  331,  331,  331,  331,  331,  332,
      332,  332,  332,  332,  332,  332,  332,  333,  333,  333,
      333,  333,  333,  333,  333,  334,  334,  334,  334,  334,
      334,  334,  334,  335,  335,  335,  335,  335,  335,  335,

      335,  336,  336,  336,  336,  336,  336,  336,  337,  337,
      337,  337,  337,  337,  337,  337,  338,  338,  338,  338,
      338,  338,  338,  338,  339,  339,  339,  339,  339,  339,
      339,  339,  340,  340,    0,  340,  340,  340,    0,  340,
      341,  341,  341,  341,  341,  341,  341,  341,  342,  342,
      342,  342,  342,  342,  342,  342,  343,  343,  343,  343,
      343,  343,  343,  343,  344,  344,    0,  344,  345,  345,
      345,  345,  345,  345,  345,  345,  346,  346,  346,  346,
      346,  346,  346,  346,  347,  347,  347,  347,  347,  347,
      347,  347,  348,  348,  348,  348,  348,  348,  348,  348,

      349,  349,  349,  349,  349,  349,  349,  349,  350,  350,
      350,  350,  350,  350,  350,  350,  351,    0,    0,  351,
      352,  352,  352,  352,  352,  352,  352,  353,  353,  353,
      353,  353,  353,  353,  353,  354,  354,  354,  354,  354,
      354,  354,  354,  355,  355,  355,  355,  356,  356,  356,
      356,  356,  356,  356,  356,  357,  357,  357,  357,  357,
      357,  357,  357,  358,  358,  358,  358,  358,  358,  358,
      359,    0,  359,  359,  360,  360,  360,  360,  360,  360,
      360,  361,  361,  361,  361,  361,  361,  361,  362,  362,
      362,  362,  362,  362,  362,  362,  363,  363,  363,  363,

      363,  363,  363,  363,  364,  364,  364,  364,  364,  364,
      364,  364,  365,  365,  365,  365,  365,  365,  365,  365,
      366,  366,  366,  366,  366,  366,  366,  366,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "markdown.grammar"
/*
 * match unicode characters as one rule instead of each byte.
 * http://stackoverflow.com/questions/10252777/making-lex-to-read-utf-8-doesnt-work?lq=1
*/
/*
 * Greatly improves parser speed by passing whole phrases instead of chars
*/
#line 1007 "lex.xng_markdown.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int xng_markdownlex_init (yyscan_t* scanner);

int xng_markdownlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int xng_markdownlex_destroy (yyscan_t yyscanner );

int xng_markdownget_debug (yyscan_t yyscanner );

void xng_markdownset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE xng_markdownget_extra (yyscan_t yyscanner );

void xng_markdownset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *xng_markdownget_in (yyscan_t yyscanner );

void xng_markdownset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *xng_markdownget_out (yyscan_t yyscanner );

void xng_markdownset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t xng_markdownget_leng (yyscan_t yyscanner );

char *xng_markdownget_text (yyscan_t yyscanner );

int xng_markdownget_lineno (yyscan_t yyscanner );

void xng_markdownset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int xng_markdownwrap (yyscan_t yyscanner );
#else
extern int xng_markdownwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int xng_markdownlex (yyscan_t yyscanner);

#define YY_DECL int xng_markdownlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 57 "markdown.grammar"


#line 1232 "lex.xng_markdown.c"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			xng_markdownensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				xng_markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		xng_markdown_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 327 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2029 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 59 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_EM, yyscanner);}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 60 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_STRONG, yyscanner);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_STRONGEM, yyscanner);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_STRIKETHROUGH, yyscanner);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_CODESPAN, yyscanner);}
	YY_BREAK
case 6:
/* rule 6 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 64 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_HEADER, yyscanner);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 65 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_MULTILINEHEADER, yyscanner);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 66 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_URL, yyscanner);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 67 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_HREF, yyscanner);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 68 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_BULLETSTART, yyscanner);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_PHRASE, yyscanner);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_WORD, yyscanner);}
	YY_BREAK
case 13:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 72 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_NEWLINE, yyscanner);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 73 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_PARAGRAPH, yyscanner);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 74 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_UNKNOWN, yyscanner);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_UNKNOWN, yyscanner);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_UNKNOWN, yyscanner);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "markdown.grammar"
ECHO;
	YY_BREAK
#line 1421 "lex.xng_markdown.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * xng_markdownlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( xng_markdownwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of xng_markdownlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					xng_markdownrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			xng_markdownrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) xng_markdownrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 327 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 327 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 326);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					xng_markdownrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( xng_markdownwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void xng_markdownrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        xng_markdownensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            xng_markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	xng_markdown_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	xng_markdown_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void xng_markdown_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		xng_markdownpop_buffer_state();
	 *		xng_markdownpush_buffer_state(new_buffer);
     */
	xng_markdownensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	xng_markdown_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (xng_markdownwrap()) processing, but the only time this flag
	 * is looked at is after xng_markdownwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void xng_markdown_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE xng_markdown_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) xng_markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in xng_markdown_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) xng_markdownalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in xng_markdown_create_buffer()" );

	b->yy_is_our_buffer = 1;

	xng_markdown_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with xng_markdown_create_buffer()
 * @param yyscanner The scanner object.
 */
    void xng_markdown_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		xng_markdownfree((void *) b->yy_ch_buf ,yyscanner );

	xng_markdownfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a xng_markdownrestart() or at EOF.
 */
    static void xng_markdown_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	xng_markdown_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then xng_markdown_init_buffer was _probably_
     * called from xng_markdownrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void xng_markdown_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		xng_markdown_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void xng_markdownpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	xng_markdownensure_buffer_stack(yyscanner);

	/* This block is copied from xng_markdown_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from xng_markdown_switch_to_buffer. */
	xng_markdown_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void xng_markdownpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	xng_markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		xng_markdown_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void xng_markdownensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)xng_markdownalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in xng_markdownensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)xng_markdownrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in xng_markdownensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE xng_markdown_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) xng_markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in xng_markdown_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	xng_markdown_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to xng_markdownlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       xng_markdown_scan_bytes() instead.
 */
YY_BUFFER_STATE xng_markdown_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return xng_markdown_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to xng_markdownlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE xng_markdown_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) xng_markdownalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in xng_markdown_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = xng_markdown_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in xng_markdown_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE xng_markdownget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int xng_markdownget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int xng_markdownget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *xng_markdownget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *xng_markdownget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t xng_markdownget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *xng_markdownget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void xng_markdownset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void xng_markdownset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "xng_markdownset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void xng_markdownset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "xng_markdownset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see xng_markdown_switch_to_buffer
 */
void xng_markdownset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void xng_markdownset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int xng_markdownget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void xng_markdownset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* xng_markdownlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int xng_markdownlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) xng_markdownalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* xng_markdownlex_init_extra has the same functionality as xng_markdownlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to xng_markdownalloc in
 * the yyextra field.
 */

int xng_markdownlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    xng_markdownset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) xng_markdownalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    xng_markdownset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from xng_markdownlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * xng_markdownlex_init()
     */
    return 0;
}

/* xng_markdownlex_destroy is for both reentrant and non-reentrant scanners. */
int xng_markdownlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		xng_markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		xng_markdownpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	xng_markdownfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        xng_markdownfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * xng_markdownlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    xng_markdownfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *xng_markdownalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *xng_markdownrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void xng_markdownfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see xng_markdownrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 78 "markdown.grammar"



int xng_markdownwrap(yyscan_t yyscanner){return 1;}

