//
// Copyright 2011-2014 NimbusKit
// Copyright 2014 XING AG
//
// Autogenerated by flex using Jeff Verkoeyen's Markdown grammar
// with additions by XING AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#define YY_NO_INPUT

#include "XNGMarkdownTokens.h"

#line 3 "lex.xng_markdown.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE xng_markdownrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via xng_markdownrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void xng_markdownrestart (FILE *input_file ,yyscan_t yyscanner );
void xng_markdown_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE xng_markdown_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void xng_markdown_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void xng_markdown_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void xng_markdownpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void xng_markdownpop_buffer_state (yyscan_t yyscanner );

static void xng_markdownensure_buffer_stack (yyscan_t yyscanner );
static void xng_markdown_load_buffer_state (yyscan_t yyscanner );
static void xng_markdown_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER xng_markdown_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE xng_markdown_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE xng_markdown_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE xng_markdown_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *xng_markdownalloc (yy_size_t ,yyscan_t yyscanner );
void *xng_markdownrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void xng_markdownfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer xng_markdown_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        xng_markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            xng_markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        xng_markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            xng_markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 18
#define YY_END_OF_BUFFER 19
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[401] =
    {   0,
       16,   16,   19,   17,   15,   15,   17,   17,   17,   12,
       12,   12,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,    0,    0,   15,   15,
       15,   14,   11,   11,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    1,    0,    0,    0,   11,   11,
       12,    0,    0,    0,    0,    0,    0,    0,   12,   12,
        0,    0,    0,    0,    0,    0,    0,    1,    0,    5,
        0,   12,    0,    0,    0,    0,    0,    0,    0,    6,
        0,   10,    0,    0,   14,   13,   11,    0,    0,    0,
        0,    0,    0,    1,    0,    1,    0,    0,    0,    0,

        0,    8,    0,    0,    0,   11,    0,    0,    0,    0,
        0,    0,   12,   12,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    7,
        0,    0,    0,    7,    0,    0,    0,    0,    0,    0,
        2,    8,    0,    8,    8,    0,    8,    8,    0,    0,
        0,    0,    0,    0,   12,   12,    0,    7,    0,    0,
        0,    0,    0,    0,    7,    0,    0,    0,    0,    0,
        0,    2,    4,    0,    2,    2,    7,    0,    0,    0,
        0,    0,    8,    0,    8,    8,    8,    0,    8,    8,

        8,    8,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    8,    0,    0,    0,    0,    7,
        0,    0,    0,    0,    0,    0,    0,    7,    3,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        0,    8,    8,    0,    0,    0,    9,    9,    0,    0,
        9,    9,    8,    8,    0,    0,    7,    0,    0,    3,
        8,    8,    8,    8,    0,    8,    8,    8,    8,    8,
        0,    8,    8,    8,    8,    8,    0,    8,    8,    8,
        7,    0,    8,    0,    0,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    0,    8,    8,

        8,    8,    8,    7,    8,    0,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    0,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    0,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    6,    7,    6,    6,    6,    6,    8,
        9,   10,    6,   11,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,    6,
       18,    6,    6,    6,   15,   15,   15,   15,   15,   19,
       20,   21,   20,   20,   20,   20,   20,   20,   20,   22,
       20,   20,   23,   24,   20,   20,   20,   20,   20,   20,
       25,   26,   27,    6,   28,   29,   15,   15,   15,   15,

       15,   30,   20,   31,   20,   20,   20,   20,   20,   20,
       20,   32,   20,   20,   33,   34,   20,   20,   20,   20,
       20,   20,    6,    6,    6,   35,    1,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   39,   39,   40,   40,   40,   40,   40,   40,   40,

       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   41,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   43,   42,   42,   44,
       45,   45,   45,   46,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39
    } ;

static yyconst flex_int32_t yy_meta[47] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    3,    4,    5,    3,    2,    2,    6,    3,    3,
        3,    3,    3,    3,    7,    3,    2,    2,    2,    3,
        3,    3,    3,    3,    2,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[450] =
    {   0,
        0,   40, 1065, 1058,   46,   48,   52,   96,  106,  148,
      130,  132,  159,  194,  155,  157,  152,   64, 1020,   67,
      137,  138,  163, 1019,  199,  199, 1034,  196,  213,  215,
      217,  219,  202, 1032, 1027,  207,  174,  220,  223,  225,
      228,  231,  222,  228,  226,  994,  267,  313,  994,    0,
      981,  217,  306,  309,  305,  311,  314,  317,  229,  341,
      330,  223,  332,    0,  374,  333,  311,  334,  331,  335,
      328,  392,  354,  358,  361,  370,  373,  387,  365,  308,
      377,  977,  407,  370,  245,  403,  234,  410,  413,  419,
      423,  426,  436,  970,  942, 3942,  465,  442,  466,  455,

      484,  530,  576,  938,  605,    0,  404,  575,  579,  585,
      589,  592,  570,  568,  611,  375,  628,  444,  624,  621,
      654,  919,  649,  400,  648,  415,  639,  640,  649,  441,
      652,  635,  655,  665,  417,  668,  678,  681,  676, 3942,
      660,  692,  696,  927,  579,  913,  912,  728,  584,  725,
      594,  746,  792,  882,  822,  868,    0,  897,  695,  926,
      687,  867,  871,  582,  628,  785,  794,  440,  790,  907,
      864,  787,  634,  955,  854,  642,  786,  708,  784,  878,
      861,  883,  706,  871,  807, 3942,  796,  799,  794,  734,
      914,  882,    0,  985,    0, 1014,    0, 1044,  729, 1073,

      922, 1102,  701, 1131,  874,  888,  937,  736,  941,  966,
      952,  703,  867,  956,  958,  923,  977, 1160, 1189,  654,
      893,  573,  993,  571,  915,  994,  574,  472,  441,    0,
     1218,  994, 1247,    0, 1276, 1010, 1305, 1038,  696, 1022,
     1012, 1334, 1012, 1024, 1363, 1393, 1046,  454, 1437, 1048,
      428, 3942, 1067, 1463, 1068, 1492,  399,  386, 1006, 3942,
     1082, 1521, 1098, 1097, 1099, 1550, 1113, 1579, 1608,  940,
     1107, 1050, 1637, 1666, 1127, 1695, 1724,  382, 1754, 1800,
     1129, 1081, 1128, 1151, 1180, 1829, 1134, 1858, 1887, 1184,
     1916, 1945,  988, 1974, 1182, 2003, 1184, 1213,  357, 2033,

     2079,    0, 2108,  357, 1194, 1210, 2137, 1212, 2166, 2195,
     2224, 1213, 1215, 1251, 1242, 2254, 2300, 2346,  327, 2375,
     2404, 1244, 1245, 2433, 1252, 1281, 2462, 1285, 1281, 1282,
     1284, 2492, 2538,  312, 2568, 2614,    0, 2643, 2672, 2701,
     1298, 1300, 1329, 1310, 1339, 1331, 1332, 1333,    0, 2731,
        0, 2760,    0, 2790,  308, 2819, 2848, 2877, 2906, 1339,
     1340, 1341, 1358, 1360,    0, 2935, 2964,    0, 2993, 3022,
     3051, 3080, 3109, 1426, 1428, 3138, 3167, 3196, 3225, 3254,
     3283, 1381, 3312, 3341, 3370, 3399, 3428, 1448, 3457, 3486,
     3515, 3544, 1467, 3573, 1481, 3602, 1485, 1497, 1501, 3942,

     3632, 3639, 3646, 3653, 3660, 3667, 3674, 3681, 3688, 3695,
     3702, 3708, 3715, 3722, 3729, 3736, 3743, 3748, 3754, 3761,
     3768, 3775, 3782, 3789, 3796,  249, 3802, 3809, 3816, 3823,
     3828,  154, 3834, 3841, 3847, 3852, 3856, 3860, 3866, 3872,
     3878, 3885, 3892, 3899, 3906, 3913, 3920, 3927, 3934
    } ;

static yyconst flex_int16_t yy_def[450] =
    {   0,
      400,    1,  400,  401,  401,  400,  400,  402,  400,    9,
       10,   10,  403,  404,  405,  406,  401,    9,    9,    9,
        9,    9,    9,    9,  407,    9,  401,  400,  401,  400,
      400,  400,    7,  401,    7,  401,  401,  401,  401,  401,
      401,  401,  402,  408,  409,    9,  400,  410,    7,   47,
       10,    9,    9,    9,    9,    9,    9,    9,   10,   10,
      403,  411,  403,    9,    9,  405,  412,  413,  406,  406,
      414,   10,    9,    9,    9,    9,    9,    9,  407,  400,
      407,  401,    9,  400,  400,  400,    7,  401,  401,  401,
      401,  401,  401,  401,  408,  400,  408,  409,  415,  416,

      400,  400,  417,    9,    9,  101,    9,    9,    9,    9,
        9,    9,   10,   10,  403,  411,  411,  411,  411,  418,
        9,  412,  412,  413,  419,  420,  414,  414,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,  407,  400,
      401,  401,  401,  408,  401,  415,  400,  415,  416,  421,
      401,  400,  422,  102,  400,  423,  102,  102,  418,    9,
        9,    9,    9,  401,   10,   10,  424,  411,  425,  418,
      426,  418,  427,    9,  412,  401,  419,  419,  400,  420,
      428,  401,  414,  407,  401,  400,  415,  401,  421,  400,
      421,  401,  152,  429,  152,  152,  155,  430,  102,  102,

      431,  102,  432,    9,  401,  424,  425,  433,  424,  424,
      425,  434,  425,  425,  431,  435,  418,  418,    9,  419,
      401,  428,  428,  400,  401,  407,  400,  421,  401,  152,
      152,  436,  152,  155,  155,  431,  102,  431,  437,  238,
      438,  102,  436,  439,    9,  400,  403,  411,  425,  434,
      401,  400,  238,  238,  218,    9,  428,  400,  407,  400,
      436,  152,  436,  436,  440,  152,  437,  155,  102,  437,
      441,  238,  254,  102,  436,  436,    9,  442,  400,  443,
      425,  434,  254,  218,    9,  152,  436,  276,  152,  437,
      155,  102,  437,  437,  273,  102,  276,    9,  279,  400,

      444,  279,  279,  434,  254,  218,  152,  288,  152,  155,
      102,  294,  273,  102,  276,  400,  400,  445,  279,  279,
      279,  254,  218,  152,  288,  152,  155,  102,  294,  273,
      276,  400,  446,  317,  400,  447,  317,  317,  279,  279,
      254,  218,  152,  288,  155,  294,  273,  276,  332,  448,
      332,  332,  335,  449,  317,  317,  317,  279,  279,  254,
      288,  294,  273,  276,  332,  332,  332,  335,  335,  317,
      317,  279,  279,  288,  294,  332,  332,  335,  317,  317,
      279,  279,  332,  332,  335,  317,  317,  279,  332,  332,
      335,  317,  317,  332,  332,  335,  317,  332,  335,    0,

      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400
    } ;

static yyconst flex_int16_t yy_nxt[3989] =
    {   0,
        4,    5,    6,    4,    7,    4,    4,    4,    4,    8,
        4,    9,    4,    4,   10,    4,    4,    4,   11,   10,
       12,   10,   10,   10,   13,   14,    4,   15,   16,   11,
       12,   10,   10,   10,   17,    9,    9,    9,    9,   18,
       19,   20,   21,   22,   23,   24,   25,   29,   30,   31,
       32,   26,   27,   27,   28,   27,   33,   27,   27,   27,
       27,   27,   34,   27,   34,   27,   35,   27,   34,   27,
       35,   35,   35,   35,   35,   35,   27,   27,   27,   27,
       27,   35,   35,   35,   35,   35,   27,   27,   27,   27,
       27,   36,   37,   38,   39,   40,   41,   42,   44,   72,

       72,   72,   74,   74,   74,   45,   27,   27,   28,   27,
       27,   27,   27,   27,   27,   27,   27,   46,   47,   27,
       46,   27,   27,   27,   46,   46,   46,   46,   46,   46,
       27,   48,   27,   27,   27,   46,   46,   46,   46,   46,
       27,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   49,   59,   28,   60,  243,   67,   34,   28,
       50,   62,   51,   59,   34,   60,   51,   51,   51,   51,
       51,   51,   75,   75,   76,   76,   28,   51,   51,   51,
       51,   51,   68,   27,   63,   70,   71,   52,   53,   54,
       55,   56,   57,   58,   27,   27,   28,   27,   77,   77,

       77,   80,   27,   82,   86,   81,   87,   84,   65,   28,
       83,   88,   65,   84,   29,   30,   31,   31,   31,   31,
       31,   85,   28,   65,   44,   28,   84,   28,   99,  101,
       28,   94,   84,   28,  117,  100,   86,   96,   87,   97,
      117,  106,   35,   35,   35,   97,   31,   85,  118,  119,
      113,  215,   51,   51,   51,   89,   89,   89,   90,   90,
      113,   91,   91,   92,   92,   92,   93,   27,   27,   28,
       27,   27,   27,   27,   27,   27,   27,   27,  102,   27,
       27,  102,   27,   27,   27,  102,  102,  102,  102,  102,
      102,   27,  103,   27,   27,   27,  102,  102,  102,  102,

      102,   27,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,   27,   27,   28,   27,  101,  101,   84,
      316,  101,  123,  101,  316,   84,  101,  105,  123,  101,
       28,  105,   62,   28,   62,   67,  125,   28,   96,  316,
      109,  109,  105,  107,  108,  108,  108,  110,  110,  111,
      111,  111,  112,  106,   27,   63,  115,   63,  115,   70,
       94,  126,  128,   70,  114,  252,  101,   80,   27,  316,
      101,   27,  140,  101,  114,   64,  120,   64,   64,   80,
       27,   84,  101,  139,   28,  101,   27,   84,  121,   72,
       72,   72,  121,   72,   72,   72,   72,   72,   72,  101,

      118,  119,  125,  121,  106,  136,  136,  136,  137,  137,
      137,   82,   28,  260,   84,   28,  101,  181,   83,  101,
       84,   28,  138,  138,  138,   28,  224,  176,   28,  101,
       28,  129,  130,  131,  132,  133,  134,  135,   28,   51,
       51,   51,  182,   28,   99,   35,   35,   35,   35,   35,
       35,  145,   78,  101,   35,   35,   35,  150,  141,  141,
      141,  142,  142,  142,  151,  118,  119,  144,  116,  118,
      119,  143,  143,  143,   96,  147,   97,  148,   73,  118,
      119,  190,   97,  148,   27,   27,   28,   27,   27,   27,
       27,   27,   27,   27,   27,  152,   27,   27,  152,   27,

       27,   27,  152,  152,  152,  152,  152,  152,   27,  153,
       27,   27,   27,  152,  152,  152,  152,  152,   27,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
       27,   27,   28,   27,   27,   27,   27,   27,   27,   27,
       27,  154,   47,  155,  154,   27,   27,   27,  154,  154,
      154,  154,  154,  154,   27,  156,   27,   27,   27,  154,
      154,  154,  154,  154,   27,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,   27,   27,   28,   27,
      106,   28,  106,  260,   28,  164,  150,  101,  185,  166,
      158,  101,  165,  188,  158,  205,   28,  101,  258,  166,

      224,  101,  165,  192,  101,  158,  104,  159,  104,  104,
       51,   51,   51,   62,   51,   51,   51,  101,  167,  160,
      161,  161,  161,  160,  162,  162,  162,  163,  163,  163,
      168,  169,  170,  171,  160,   27,   63,  115,   84,  117,
      106,   28,   28,  164,   28,  117,  173,  101,  218,  118,
      119,  175,  218,  118,  119,   64,  120,   64,   64,  178,
      123,  101,   28,  218,  101,  178,  123,  101,  174,  185,
       75,   75,  174,  128,  183,  179,   96,  101,   80,   27,
      101,  179,  184,  174,   72,   72,   72,   74,   74,   74,
      101,   76,   76,  101,   28,   35,   35,   35,   28,  101,

       77,   77,   77,   72,   72,   72,  170,  203,   28,  239,
      220,  252,   84,   72,   72,   72,   72,   72,   72,  178,
      173,  271,   51,   51,   51,  178,  244,   35,   35,   35,
      187,   35,   35,   35,  190,  179,  191,  147,  250,  148,
      183,  101,  191,  227,  251,  148,   27,   27,   28,   27,
       27,   27,   27,   27,   27,   27,   27,  193,   27,  155,
      193,   27,   27,   27,  193,  193,  193,  193,  193,  193,
       27,  194,   27,   27,   27,  193,  193,  193,  193,  193,
       27,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,   27,   27,   28,   27,  207,  106,  116,  203,

      164,   28,   61,  190,  400,  147,  196,  165,  192,   28,
      196,  186,  173,  179,  212,  213,  214,  165,  208,  209,
      210,  196,   27,   27,   28,   27,   27,   27,   27,   27,
       27,   27,   27,  197,   27,  155,  197,   27,   27,   27,
      197,  197,  197,  197,  197,  197,   27,  198,   27,   27,
       27,  197,  197,  197,  197,  197,   27,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,   27,   27,
       28,   27,  223,   80,   27,  248,   28,  226,  223,  101,
      181,   96,  200,  101,   28,   28,  200,  246,  224,  216,
      207,  229,  213,  214,  101,   28,  247,  200,  157,  201,

      157,  157,   51,   51,   51,  221,   51,   51,   51,  140,
      225,  202,  208,  209,  210,  202,  228,   28,  170,  203,
      225,  186,  147,  190,   84,  191,  202,  104,  159,  104,
      104,  191,  173,  238,  171,  239,   96,  254,  101,   84,
      204,  254,  229,  207,  204,  248,   96,  241,  249,  247,
      101,   96,  254,  239,  249,  204,   64,  120,   64,   64,
      248,  212,  213,  214,  248,  271,  209,  210,  207,  219,
      171,  239,   28,  219,  247,  400,  212,  213,  214,   28,
      212,  213,  214,  241,  219,   27,   27,   28,   27,  203,
      208,  209,  210,  106,  400,  257,   80,   27,   49,  231,

      259,  239,  173,  231,  223,  263,  101,  239,   80,   27,
      223,   84,   27,  271,  231,  195,  232,  195,  195,  265,
      224,  238,  203,  239,  400,  239,  273,   84,  233,  400,
      273,   49,  233,  240,   28,  241,   28,  265,  276,  400,
      140,  273,  276,  233,   27,   27,   28,   27,   62,  238,
      203,  239,  400,  276,   78,   84,  252,   73,  235,  282,
       28,  240,  235,  241,  400,  282,  400,  400,  400,  400,
       27,   63,  115,  235,  199,  236,  199,  199,  240,  171,
      400,  400,  284,  304,  400,  101,  284,  237,  400,  252,
      400,  237,  282,  263,  400,  239,  400,  284,  282,   84,

      140,  400,  237,  157,  201,  157,  157,  265,  400,  263,
      239,  239,  400,  288,  400,   84,  242,  288,  400,  400,
      242,  294,  265,  265,  290,  294,  239,  400,  288,  400,
       84,  242,  104,  159,  104,  104,  294,  248,  271,  400,
      239,  400,  305,  101,  400,  245,  305,  239,  400,  245,
      400,  400,  265,  212,  213,  214,  400,  305,  400,  265,
      245,  217,  217,  217,  217,  306,  400,  400,  400,  306,
      400,  400,  203,  400,  255,  400,  400,  400,  255,  400,
      306,   64,  120,   64,   64,  173,  140,  400,  400,  255,
       64,  120,   64,   64,  400,  290,  313,  239,  315,  400,

      313,   84,  315,  256,  400,  400,  400,  256,  322,  271,
      400,  313,  322,  315,  104,  159,  104,  104,  256,  230,
      261,  230,  230,  322,  323,  101,  325,  329,  323,  330,
      325,  329,  262,  330,  400,  400,  262,  400,  400,  323,
      400,  325,  329,  400,  330,  400,  400,  262,  195,  232,
      195,  195,  157,  201,  157,  157,  331,  400,  341,  342,
      331,  266,  341,  342,  400,  266,  344,  400,  400,  400,
      344,  331,  400,  341,  342,  400,  266,  234,  267,  234,
      234,  344,  195,  232,  195,  195,  199,  236,  199,  199,
      268,  400,  400,  400,  268,  346,  347,  101,  348,  346,

      347,  400,  348,  400,  400,  268,  199,  236,  199,  199,
      346,  347,  360,  348,  172,  400,  360,  101,  172,  269,
      400,  400,  400,  269,  361,  400,  400,  360,  361,  172,
      230,  261,  230,  230,  269,  157,  201,  157,  157,  361,
      234,  267,  234,  234,  400,  362,  363,  364,  274,  362,
      363,  364,  274,  240,  374,  375,  400,  240,  374,  375,
      362,  363,  364,  274,  104,  159,  104,  104,  240,  374,
      375,  400,  240,  400,  264,  101,  240,  277,  264,  400,
      400,  277,  302,  120,  302,   64,  400,  240,  400,  264,
      400,  400,  277,  278,  278,   28,  278,   27,  278,  278,

      278,  278,  278,  278,  279,  278,  278,  279,  278,  278,
      278,  279,  279,  279,  279,  279,  279,  278,  280,  278,
      278,  278,  279,  279,  279,  279,  279,  278,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  281,
      264,  400,  270,  400,  264,  248,  270,  400,  249,  319,
      159,  319,  104,  400,  249,  264,  400,  270,  400,  400,
      316,  212,  213,  214,  253,  253,  253,  253,  337,  201,
      337,  157,  400,  400,  240,  171,  400,  283,  400,  400,
      400,  283,  351,  232,  351,  195,  355,  236,  355,  199,
      400,  400,  283,   64,  120,   64,   64,  316,  365,  261,

      365,  230,  368,  267,  368,  234,  285,  400,  400,  400,
      285,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  285,  230,  261,  230,  230,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  286,  400,  400,  400,  286,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      286,  195,  232,  195,  195,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  289,  400,  400,  400,  289,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  289,
      234,  267,  234,  234,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  291,  400,  400,  400,  291,  400,  400,

      400,  400,  400,  400,  400,  400,  400,  400,  291,  199,
      236,  199,  199,  400,  400,  400,  400,  400,  400,  400,
      101,  400,  292,  400,  400,  400,  292,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  292,  272,  272,
      272,  272,  400,  400,  400,  400,  400,  400,  400,  203,
      400,  295,  400,  400,  400,  295,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  295,  157,  201,  157,
      157,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      296,  400,  400,  400,  296,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  296,  275,  275,  275,  275,

      400,  400,  400,  400,  400,  400,  400,  400,  239,  297,
      400,  400,  400,  297,  400,  400,  400,  400,  400,  400,
      265,  400,  400,  400,  297,  104,  159,  104,  104,  400,
      400,  400,  400,  400,  400,  400,  101,  400,  298,  400,
      400,  400,  298,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  298,  278,  278,   28,  278,   27,  278,
      278,  278,  278,  278,  278,  299,  300,  278,  299,  278,
      278,  278,  299,  299,  299,  299,  299,  299,  278,  301,
      278,  278,  278,  299,  299,  299,  299,  299,  278,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  299,  299,

      278,  278,   28,  278,   64,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  303,  400,  400,  400,  303,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  303,
      230,  261,  230,  230,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  307,  400,  400,  400,  307,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  307,  287,
      287,  287,  287,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  308,  400,  400,  400,  308,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  308,  195,  232,
      195,  195,  400,  400,  400,  400,  400,  400,  400,  400,

      400,  309,  400,  400,  400,  309,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  309,  234,  267,  234,
      234,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      310,  400,  400,  400,  310,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  310,  199,  236,  199,  199,
      400,  400,  400,  400,  400,  400,  400,  101,  400,  311,
      400,  400,  400,  311,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  311,  293,  293,  293,  293,  400,
      400,  400,  400,  400,  400,  400,  400,  239,  312,  400,
      400,  400,  312,  400,  400,  400,  400,  400,  400,  271,

      400,  400,  400,  312,  157,  201,  157,  157,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  314,  400,  400,
      400,  314,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  314,  278,  278,   28,  278,   27,  278,  278,
      278,  278,  278,  278,  317,  278,  278,  317,  278,  278,
      278,  317,  317,  317,  317,  317,  317,  278,  318,  278,
      278,  278,  317,  317,  317,  317,  317,  278,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  278,
      278,   28,  278,  104,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  320,  400,  400,  400,  320,  400,  400,

      400,  400,  400,  400,  400,  400,  400,  400,  320,  302,
      120,  302,   64,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  321,  400,  400,  400,  321,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  321,  230,  261,
      230,  230,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  324,  400,  400,  400,  324,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  324,  195,  232,  195,
      195,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      326,  400,  400,  400,  326,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  326,  234,  267,  234,  234,

      400,  400,  400,  400,  400,  400,  400,  400,  400,  327,
      400,  400,  400,  327,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  327,  199,  236,  199,  199,  400,
      400,  400,  400,  400,  400,  400,  101,  400,  328,  400,
      400,  400,  328,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  328,  278,  278,   28,  278,   27,  278,
      278,  278,  278,  278,  278,  332,  278,  278,  332,  278,
      278,  278,  332,  332,  332,  332,  332,  332,  278,  333,
      278,  278,  278,  332,  332,  332,  332,  332,  278,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,

      278,  278,   28,  278,   27,  278,  278,  278,  278,  278,
      278,  334,  300,  335,  334,  278,  278,  278,  334,  334,
      334,  334,  334,  334,  278,  336,  278,  278,  278,  334,
      334,  334,  334,  334,  278,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  278,  278,   28,  278,
      157,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      338,  400,  400,  400,  338,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  338,  319,  159,  319,  104,
      400,  400,  400,  400,  400,  400,  400,  316,  400,  339,
      400,  400,  400,  339,  400,  400,  400,  400,  400,  400,

      400,  400,  400,  400,  339,  302,  120,  302,   64,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  340,  400,
      400,  400,  340,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  340,  230,  261,  230,  230,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  343,  400,  400,
      400,  343,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  343,  234,  267,  234,  234,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  345,  400,  400,  400,
      345,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  345,  278,  278,   28,  278,   27,  278,  278,  278,

      278,  278,  278,  349,  278,  335,  349,  278,  278,  278,
      349,  349,  349,  349,  349,  349,  278,  350,  278,  278,
      278,  349,  349,  349,  349,  349,  278,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  278,  278,
       28,  278,  195,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  352,  400,  400,  400,  352,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  352,  278,  278,
       28,  278,   27,  278,  278,  278,  278,  278,  278,  353,
      278,  335,  353,  278,  278,  278,  353,  353,  353,  353,
      353,  353,  278,  354,  278,  278,  278,  353,  353,  353,

      353,  353,  278,  353,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  278,  278,   28,  278,  199,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  356,  400,
      400,  400,  356,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  356,  337,  201,  337,  157,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  357,  400,  400,
      400,  357,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  357,  319,  159,  319,  104,  400,  400,  400,
      400,  400,  400,  400,  316,  400,  358,  400,  400,  400,
      358,  400,  400,  400,  400,  400,  400,  400,  400,  400,

      400,  358,  302,  120,  302,   64,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  359,  400,  400,  400,  359,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      359,  278,  278,   28,  278,  230,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  366,  400,  400,  400,  366,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      366,  351,  232,  351,  195,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  367,  400,  400,  400,  367,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  367,
      278,  278,   28,  278,  234,  400,  400,  400,  400,  400,

      400,  400,  400,  400,  369,  400,  400,  400,  369,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  369,
      355,  236,  355,  199,  400,  400,  400,  400,  400,  400,
      400,  316,  400,  370,  400,  400,  400,  370,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  370,  337,
      201,  337,  157,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  371,  400,  400,  400,  371,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  371,  319,  159,
      319,  104,  400,  400,  400,  400,  400,  400,  400,  316,
      400,  372,  400,  400,  400,  372,  400,  400,  400,  400,

      400,  400,  400,  400,  400,  400,  372,  302,  120,  302,
       64,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      373,  400,  400,  400,  373,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  373,  365,  261,  365,  230,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  376,
      400,  400,  400,  376,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  376,  351,  232,  351,  195,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  377,  400,
      400,  400,  377,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  377,  368,  267,  368,  234,  400,  400,

      400,  400,  400,  400,  400,  400,  400,  378,  400,  400,
      400,  378,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  378,  355,  236,  355,  199,  400,  400,  400,
      400,  400,  400,  400,  316,  400,  379,  400,  400,  400,
      379,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  379,  337,  201,  337,  157,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  380,  400,  400,  400,  380,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      380,  319,  159,  319,  104,  400,  400,  400,  400,  400,
      400,  400,  316,  400,  381,  400,  400,  400,  381,  400,

      400,  400,  400,  400,  400,  400,  400,  400,  400,  381,
      302,  120,  302,   64,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  382,  400,  400,  400,  382,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  382,  365,
      261,  365,  230,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  383,  400,  400,  400,  383,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  383,  351,  232,
      351,  195,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  384,  400,  400,  400,  384,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  384,  368,  267,  368,

      234,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      385,  400,  400,  400,  385,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  385,  355,  236,  355,  199,
      400,  400,  400,  400,  400,  400,  400,  316,  400,  386,
      400,  400,  400,  386,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  386,  337,  201,  337,  157,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  387,  400,
      400,  400,  387,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  387,  319,  159,  319,  104,  400,  400,
      400,  400,  400,  400,  400,  316,  400,  388,  400,  400,

      400,  388,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  388,  365,  261,  365,  230,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  389,  400,  400,  400,
      389,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  389,  351,  232,  351,  195,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  390,  400,  400,  400,  390,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      390,  368,  267,  368,  234,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  391,  400,  400,  400,  391,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  391,

      355,  236,  355,  199,  400,  400,  400,  400,  400,  400,
      400,  316,  400,  392,  400,  400,  400,  392,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  392,  337,
      201,  337,  157,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  393,  400,  400,  400,  393,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  393,  365,  261,
      365,  230,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  394,  400,  400,  400,  394,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  394,  351,  232,  351,
      195,  400,  400,  400,  400,  400,  400,  400,  400,  400,

      395,  400,  400,  400,  395,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  395,  368,  267,  368,  234,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  396,
      400,  400,  400,  396,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  396,  355,  236,  355,  199,  400,
      400,  400,  400,  400,  400,  400,  316,  400,  397,  400,
      400,  400,  397,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  397,  365,  261,  365,  230,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  398,  400,  400,
      400,  398,  400,  400,  400,  400,  400,  400,  400,  400,

      400,  400,  398,  368,  267,  368,  234,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  399,  400,  400,  400,
      399,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  399,   27,   27,   27,   27,   27,   27,   27,   43,
       43,   43,   43,   43,   43,   43,   61,   61,   61,   61,
       61,   61,   61,   64,   64,   64,   64,   64,   64,   64,
       66,   66,   66,   66,   66,   66,   66,   69,   69,   69,
       69,   69,   69,   69,   79,   79,   79,   79,   79,   79,
       79,   95,   95,   95,   95,   95,   95,   95,   98,   98,
       98,   98,   98,   98,   98,  104,  104,  104,  104,  104,

      104,  104,  116,  116,  116,  116,  116,  116,  122,  122,
      122,  122,  122,  122,  122,  124,  124,  124,  124,  124,
      124,  124,  127,  127,  127,  127,  127,  127,  127,  146,
      146,  146,  146,  146,  146,  146,  149,  149,  149,  149,
      149,  149,  149,  157,  157,  157,  157,  157,  157,  157,
      172,  172,  400,  172,  177,  177,  177,  177,  177,  177,
      177,  180,  180,  180,  180,  180,  180,  180,  189,  189,
      189,  189,  189,  189,  189,  195,  195,  195,  195,  195,
      195,  195,  199,  199,  199,  199,  199,  199,  199,  206,
      206,  206,  206,  206,  206,  206,  211,  211,  211,  211,

      211,  211,  211,  217,  217,  217,  217,  217,  217,  222,
      222,  222,  222,  222,  222,  222,  230,  230,  230,  230,
      230,  230,  230,  234,  234,  234,  234,  234,  234,  234,
      240,  240,  240,  240,  208,  208,  208,  208,  208,  208,
      208,  212,  212,  212,  212,  212,  212,  212,  253,  253,
      253,  253,  253,  253,  264,  400,  264,  264,  270,  400,
      270,  272,  272,  272,  272,  272,  272,  275,  275,  275,
      275,  275,  275,  287,  287,  287,  287,  287,  287,  293,
      293,  293,  293,  293,  293,  278,  278,  278,  278,  278,
      278,  278,  302,  302,  302,  302,  302,  302,  302,  319,

      319,  319,  319,  319,  319,  319,  337,  337,  337,  337,
      337,  337,  337,  351,  351,  351,  351,  351,  351,  351,
      355,  355,  355,  355,  355,  355,  355,  365,  365,  365,
      365,  365,  365,  365,  368,  368,  368,  368,  368,  368,
      368,    3,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400
    } ;

static yyconst flex_int16_t yy_chk[3989] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    5,    5,    6,
        6,    2,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    8,   18,

       18,   18,   20,   20,   20,    8,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   10,   11,   17,   12,  432,   15,   10,   16,
       10,   13,   10,   11,   10,   12,   10,   10,   10,   10,
       10,   10,   21,   21,   22,   22,   37,   10,   10,   10,
       10,   10,   15,   13,   13,   16,   17,   10,   10,   10,
       10,   10,   10,   10,   14,   14,   14,   14,   23,   23,

       23,   25,   25,   26,   33,   25,   33,   28,   14,   36,
       26,   37,   14,   28,   29,   29,   30,   30,   31,   31,
       32,   32,   38,   14,   43,   39,   30,   40,   45,   52,
       41,   43,   30,   42,   62,   45,   87,   44,   87,   44,
       62,   59,   36,   36,   36,   44,   85,   85,   62,   62,
       59,  426,   52,   52,   52,   38,   38,   38,   39,   39,
       59,   40,   40,   41,   41,   41,   42,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   48,   48,   48,   48,   55,   53,   80,
      355,   54,   67,   56,  334,   80,   57,   48,   67,   58,
       71,   48,   61,   69,   63,   66,   68,   70,   67,  319,
       55,   55,   48,   53,   54,   54,   54,   56,   56,   57,
       57,   57,   58,   60,   61,   61,   61,   63,   63,   69,
       66,   68,   71,   70,   60,  304,   73,   79,   79,  299,
       74,   79,   84,   75,   60,   65,   65,   65,   65,   81,
       81,   84,   76,   81,  278,   77,  278,   84,   65,   73,
       73,   73,   65,   74,   74,   74,   75,   75,   75,   78,

      116,  116,  124,   65,   72,   76,   76,   76,   77,   77,
       77,   83,   88,  258,   86,   89,  107,  126,   83,   83,
       86,   90,   78,   78,   78,   91,  257,  124,   92,  135,
      251,   72,   72,   72,   72,   72,   72,   72,   93,  107,
      107,  107,  126,  229,   98,   88,   88,   88,   89,   89,
       89,   98,  135,  130,   90,   90,   90,  100,   91,   91,
       91,   92,   92,   92,  100,  168,  168,   97,  118,  118,
      118,   93,   93,   93,   97,   99,   97,   99,  130,  248,
      248,  228,   97,   99,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,

      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  103,  103,  103,  103,
      114,  145,  113,  227,  164,  113,  149,  108,  145,  114,
      103,  109,  113,  149,  103,  164,  151,  110,  224,  114,

      222,  111,  113,  151,  112,  103,  105,  105,  105,  105,
      108,  108,  108,  115,  109,  109,  109,  105,  115,  105,
      110,  110,  110,  105,  111,  111,  111,  112,  112,  112,
      117,  119,  120,  120,  105,  115,  115,  115,  120,  117,
      165,  127,  128,  165,  176,  117,  120,  132,  173,  119,
      119,  123,  173,  117,  117,  121,  121,  121,  121,  125,
      123,  129,  141,  173,  131,  125,  123,  133,  121,  176,
      132,  132,  121,  127,  128,  125,  123,  134,  139,  139,
      136,  220,  139,  121,  129,  129,  129,  131,  131,  131,
      137,  133,  133,  138,  142,  141,  141,  141,  143,  161,

      134,  134,  134,  136,  136,  136,  159,  159,  183,  239,
      178,  212,  159,  137,  137,  137,  138,  138,  138,  178,
      159,  239,  161,  161,  161,  178,  203,  142,  142,  142,
      148,  143,  143,  143,  150,  178,  150,  148,  208,  148,
      183,  199,  150,  190,  208,  148,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  153,  153,  153,  153,  167,  166,  169,  172,

      166,  188,  167,  189,  172,  187,  153,  166,  188,  185,
      153,  179,  172,  177,  169,  169,  169,  166,  167,  167,
      167,  153,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  156,  156,
      156,  156,  181,  184,  184,  213,  205,  184,  181,  162,
      180,  175,  156,  163,  192,  182,  156,  205,  181,  171,
      206,  192,  213,  213,  154,  221,  206,  156,  158,  158,

      158,  158,  162,  162,  162,  180,  163,  163,  163,  170,
      182,  158,  206,  206,  206,  158,  191,  225,  170,  170,
      221,  147,  146,  191,  170,  191,  158,  160,  160,  160,
      160,  191,  170,  201,  201,  201,  144,  216,  160,  201,
      160,  216,  225,  209,  160,  207,  122,  201,  207,  209,
      104,   95,  216,  270,  207,  160,  174,  174,  174,  174,
      211,  207,  207,  207,  214,  270,  209,  209,  210,  174,
      215,  215,   94,  174,  210,  215,  211,  211,  211,   82,
      214,  214,  214,  215,  174,  194,  194,  194,  194,  217,
      210,  210,  210,   51,  217,  223,  226,  226,   49,  194,

      226,  293,  217,  194,  223,  232,   46,  232,  259,  259,
      223,  232,  259,  293,  194,  196,  196,  196,  196,  232,
      223,  236,  236,  236,  240,  243,  241,  236,  196,  243,
      241,   35,  196,  240,   34,  236,   27,  243,  244,  240,
      238,  241,  244,  196,  198,  198,  198,  198,  247,  238,
      238,  238,  272,  244,   24,  238,  250,   19,  198,  250,
        4,  272,  198,  238,    3,  250,    0,  272,    0,  253,
      247,  247,  247,  198,  200,  200,  200,  200,  253,  253,
        0,    0,  255,  282,  253,  200,  255,  200,    0,  282,
        0,  200,  282,  261,    0,  261,    0,  255,  282,  261,

      263,    0,  200,  202,  202,  202,  202,  261,    0,  263,
      264,  263,    0,  265,  264,  263,  202,  265,    0,    0,
      202,  271,  264,  263,  267,  271,  267,    0,  265,    0,
      267,  202,  204,  204,  204,  204,  271,  281,  267,    0,
      275,    0,  283,  204,  275,  204,  283,  287,    0,  204,
        0,  287,  275,  281,  281,  281,    0,  283,    0,  287,
      204,  218,  218,  218,  218,  284,    0,    0,    0,  284,
        0,    0,  218,    0,  218,    0,    0,  218,  218,    0,
      284,  285,  285,  285,  285,  218,  290,    0,    0,  218,
      219,  219,  219,  219,    0,  290,  295,  290,  297,    0,

      295,  290,  297,  219,    0,    0,    0,  219,  305,  290,
        0,  295,  305,  297,  298,  298,  298,  298,  219,  231,
      231,  231,  231,  305,  306,  298,  308,  312,  306,  313,
      308,  312,  231,  313,    0,    0,  231,    0,    0,  306,
        0,  308,  312,    0,  313,    0,    0,  231,  233,  233,
      233,  233,  314,  314,  314,  314,  315,    0,  322,  323,
      315,  233,  322,  323,    0,  233,  325,    0,    0,    0,
      325,  315,    0,  322,  323,    0,  233,  235,  235,  235,
      235,  325,  326,  326,  326,  326,  328,  328,  328,  328,
      235,    0,    0,    0,  235,  329,  330,  328,  331,  329,

      330,    0,  331,    0,    0,  235,  237,  237,  237,  237,
      329,  330,  341,  331,  342,    0,  341,  237,  342,  237,
        0,    0,    0,  237,  344,    0,    0,  341,  344,  342,
      343,  343,  343,  343,  237,  242,  242,  242,  242,  344,
      345,  345,  345,  345,    0,  346,  347,  348,  242,  346,
      347,  348,  242,  360,  361,  362,    0,  360,  361,  362,
      346,  347,  348,  242,  245,  245,  245,  245,  360,  361,
      362,    0,  363,    0,  364,  245,  363,  245,  364,    0,
        0,  245,  382,  382,  382,  382,    0,  363,    0,  364,
        0,    0,  245,  246,  246,  246,  246,  246,  246,  246,

      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  249,
      374,    0,  375,    0,  374,  249,  375,    0,  249,  388,
      388,  388,  388,    0,  249,  374,    0,  375,    0,    0,
      388,  249,  249,  249,  254,  254,  254,  254,  393,  393,
      393,  393,    0,    0,  254,  254,    0,  254,    0,    0,
      254,  254,  395,  395,  395,  395,  397,  397,  397,  397,
        0,    0,  254,  256,  256,  256,  256,  397,  398,  398,

      398,  398,  399,  399,  399,  399,  256,    0,    0,    0,
      256,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  256,  262,  262,  262,  262,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  262,    0,    0,    0,  262,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      262,  266,  266,  266,  266,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  266,    0,    0,    0,  266,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  266,
      268,  268,  268,  268,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  268,    0,    0,    0,  268,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  268,  269,
      269,  269,  269,    0,    0,    0,    0,    0,    0,    0,
      269,    0,  269,    0,    0,    0,  269,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  269,  273,  273,
      273,  273,    0,    0,    0,    0,    0,    0,    0,  273,
        0,  273,    0,    0,    0,  273,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  273,  274,  274,  274,
      274,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      274,    0,    0,    0,  274,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  274,  276,  276,  276,  276,

        0,    0,    0,    0,    0,    0,    0,    0,  276,  276,
        0,    0,  276,  276,    0,    0,    0,    0,    0,    0,
      276,    0,    0,    0,  276,  277,  277,  277,  277,    0,
        0,    0,    0,    0,    0,    0,  277,    0,  277,    0,
        0,    0,  277,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  277,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,

      280,  280,  280,  280,  280,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  280,    0,    0,    0,  280,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  280,
      286,  286,  286,  286,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  286,    0,    0,    0,  286,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  286,  288,
      288,  288,  288,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  288,    0,    0,    0,  288,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  288,  289,  289,
      289,  289,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  289,    0,    0,    0,  289,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  289,  291,  291,  291,
      291,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      291,    0,    0,    0,  291,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  291,  292,  292,  292,  292,
        0,    0,    0,    0,    0,    0,    0,  292,    0,  292,
        0,    0,    0,  292,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  292,  294,  294,  294,  294,    0,
        0,    0,    0,    0,    0,    0,    0,  294,  294,    0,
        0,    0,  294,    0,    0,    0,    0,    0,    0,  294,

        0,    0,    0,  294,  296,  296,  296,  296,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  296,    0,    0,
        0,  296,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  296,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  301,
      301,  301,  301,  301,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  301,    0,    0,    0,  301,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  301,  303,
      303,  303,  303,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  303,    0,    0,    0,  303,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  303,  307,  307,
      307,  307,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  307,    0,    0,    0,  307,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  307,  309,  309,  309,
      309,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      309,    0,    0,    0,  309,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  309,  310,  310,  310,  310,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  310,
        0,    0,    0,  310,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  310,  311,  311,  311,  311,    0,
        0,    0,    0,    0,    0,    0,  311,    0,  311,    0,
        0,    0,  311,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  311,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,

      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  318,  318,  318,  318,
      318,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      318,    0,    0,    0,  318,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  318,  320,  320,  320,  320,
        0,    0,    0,    0,    0,    0,    0,  320,    0,  320,
        0,    0,    0,  320,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  320,  321,  321,  321,  321,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  321,    0,
        0,    0,  321,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  321,  324,  324,  324,  324,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  324,    0,    0,
        0,  324,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  324,  327,  327,  327,  327,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  327,    0,    0,    0,
      327,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  327,  332,  332,  332,  332,  332,  332,  332,  332,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  333,  333,
      333,  333,  333,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  333,    0,    0,    0,  333,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  333,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,

      335,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  336,  336,  336,  336,  336,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  336,    0,
        0,    0,  336,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  336,  338,  338,  338,  338,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  338,    0,    0,
        0,  338,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  338,  339,  339,  339,  339,    0,    0,    0,
        0,    0,    0,    0,  339,    0,  339,    0,    0,    0,
      339,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  339,  340,  340,  340,  340,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  340,    0,    0,    0,  340,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      340,  350,  350,  350,  350,  350,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  350,    0,    0,    0,  350,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      350,  352,  352,  352,  352,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  352,    0,    0,    0,  352,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  352,
      354,  354,  354,  354,  354,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  354,    0,    0,    0,  354,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  354,
      356,  356,  356,  356,    0,    0,    0,    0,    0,    0,
        0,  356,    0,  356,    0,    0,    0,  356,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  356,  357,
      357,  357,  357,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  357,    0,    0,    0,  357,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  357,  358,  358,
      358,  358,    0,    0,    0,    0,    0,    0,    0,  358,
        0,  358,    0,    0,    0,  358,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  358,  359,  359,  359,
      359,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      359,    0,    0,    0,  359,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  359,  366,  366,  366,  366,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  366,
        0,    0,    0,  366,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  366,  367,  367,  367,  367,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  367,    0,
        0,    0,  367,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  367,  369,  369,  369,  369,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  369,    0,    0,
        0,  369,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  369,  370,  370,  370,  370,    0,    0,    0,
        0,    0,    0,    0,  370,    0,  370,    0,    0,    0,
      370,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  370,  371,  371,  371,  371,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  371,    0,    0,    0,  371,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      371,  372,  372,  372,  372,    0,    0,    0,    0,    0,
        0,    0,  372,    0,  372,    0,    0,    0,  372,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  372,
      373,  373,  373,  373,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  373,    0,    0,    0,  373,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  373,  376,
      376,  376,  376,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  376,    0,    0,    0,  376,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  376,  377,  377,
      377,  377,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  377,    0,    0,    0,  377,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  377,  378,  378,  378,

      378,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      378,    0,    0,    0,  378,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  378,  379,  379,  379,  379,
        0,    0,    0,    0,    0,    0,    0,  379,    0,  379,
        0,    0,    0,  379,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  379,  380,  380,  380,  380,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  380,    0,
        0,    0,  380,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  380,  381,  381,  381,  381,    0,    0,
        0,    0,    0,    0,    0,  381,    0,  381,    0,    0,

        0,  381,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  381,  383,  383,  383,  383,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  383,    0,    0,    0,
      383,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  383,  384,  384,  384,  384,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  384,    0,    0,    0,  384,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      384,  385,  385,  385,  385,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  385,    0,    0,    0,  385,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  385,

      386,  386,  386,  386,    0,    0,    0,    0,    0,    0,
        0,  386,    0,  386,    0,    0,    0,  386,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  386,  387,
      387,  387,  387,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  387,    0,    0,    0,  387,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  387,  389,  389,
      389,  389,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  389,    0,    0,    0,  389,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  389,  390,  390,  390,
      390,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      390,    0,    0,    0,  390,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  390,  391,  391,  391,  391,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  391,
        0,    0,    0,  391,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  391,  392,  392,  392,  392,    0,
        0,    0,    0,    0,    0,    0,  392,    0,  392,    0,
        0,    0,  392,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  392,  394,  394,  394,  394,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  394,    0,    0,
        0,  394,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  394,  396,  396,  396,  396,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  396,    0,    0,    0,
      396,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  396,  401,  401,  401,  401,  401,  401,  401,  402,
      402,  402,  402,  402,  402,  402,  403,  403,  403,  403,
      403,  403,  403,  404,  404,  404,  404,  404,  404,  404,
      405,  405,  405,  405,  405,  405,  405,  406,  406,  406,
      406,  406,  406,  406,  407,  407,  407,  407,  407,  407,
      407,  408,  408,  408,  408,  408,  408,  408,  409,  409,
      409,  409,  409,  409,  409,  410,  410,  410,  410,  410,

      410,  410,  411,  411,  411,  411,  411,  411,  412,  412,
      412,  412,  412,  412,  412,  413,  413,  413,  413,  413,
      413,  413,  414,  414,  414,  414,  414,  414,  414,  415,
      415,  415,  415,  415,  415,  415,  416,  416,  416,  416,
      416,  416,  416,  417,  417,  417,  417,  417,  417,  417,
      418,  418,    0,  418,  419,  419,  419,  419,  419,  419,
      419,  420,  420,  420,  420,  420,  420,  420,  421,  421,
      421,  421,  421,  421,  421,  422,  422,  422,  422,  422,
      422,  422,  423,  423,  423,  423,  423,  423,  423,  424,
      424,  424,  424,  424,  424,  424,  425,  425,  425,  425,

      425,  425,  425,  427,  427,  427,  427,  427,  427,  428,
      428,  428,  428,  428,  428,  428,  429,  429,  429,  429,
      429,  429,  429,  430,  430,  430,  430,  430,  430,  430,
      431,  431,  431,  431,  433,  433,  433,  433,  433,  433,
      433,  434,  434,  434,  434,  434,  434,  434,  435,  435,
      435,  435,  435,  435,  436,    0,  436,  436,  437,    0,
      437,  438,  438,  438,  438,  438,  438,  439,  439,  439,
      439,  439,  439,  440,  440,  440,  440,  440,  440,  441,
      441,  441,  441,  441,  441,  442,  442,  442,  442,  442,
      442,  442,  443,  443,  443,  443,  443,  443,  443,  444,

      444,  444,  444,  444,  444,  444,  445,  445,  445,  445,
      445,  445,  445,  446,  446,  446,  446,  446,  446,  446,
      447,  447,  447,  447,  447,  447,  447,  448,  448,  448,
      448,  448,  448,  448,  449,  449,  449,  449,  449,  449,
      449,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  400,  400,  400
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "markdown.grammar"
/*
 * match unicode characters as one rule instead of each byte.
 * http://stackoverflow.com/questions/10252777/making-lex-to-read-utf-8-doesnt-work?lq=1
*/
/*
 * Greatly improves parser speed by passing whole phrases instead of chars
*/
#line 1453 "lex.xng_markdown.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int xng_markdownlex_init (yyscan_t* scanner);

int xng_markdownlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int xng_markdownlex_destroy (yyscan_t yyscanner );

int xng_markdownget_debug (yyscan_t yyscanner );

void xng_markdownset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE xng_markdownget_extra (yyscan_t yyscanner );

void xng_markdownset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *xng_markdownget_in (yyscan_t yyscanner );

void xng_markdownset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *xng_markdownget_out (yyscan_t yyscanner );

void xng_markdownset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t xng_markdownget_leng (yyscan_t yyscanner );

char *xng_markdownget_text (yyscan_t yyscanner );

int xng_markdownget_lineno (yyscan_t yyscanner );

void xng_markdownset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int xng_markdownwrap (yyscan_t yyscanner );
#else
extern int xng_markdownwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int xng_markdownlex (yyscan_t yyscanner);

#define YY_DECL int xng_markdownlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 57 "markdown.grammar"


#line 1678 "lex.xng_markdown.c"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			xng_markdownensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				xng_markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		xng_markdown_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 401 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3942 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 59 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_EM, yyscanner);}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 60 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_STRONG, yyscanner);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_STRONGEM, yyscanner);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_STRIKETHROUGH, yyscanner);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_CODESPAN, yyscanner);}
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 64 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_HEADER, yyscanner);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 65 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_MULTILINEHEADER, yyscanner);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 66 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_URL, yyscanner);}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 67 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_HREF, yyscanner);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 68 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_BULLETSTART, yyscanner);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_PHRASE, yyscanner);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_WORD, yyscanner);}
	YY_BREAK
case 13:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 72 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_NEWLINE, yyscanner);}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 73 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_PARAGRAPH, yyscanner);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 74 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_UNKNOWN, yyscanner);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_UNKNOWN, yyscanner);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "markdown.grammar"
{xng_markdown_consume(yytext, MARKDOWN_UNKNOWN, yyscanner);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "markdown.grammar"
ECHO;
	YY_BREAK
#line 1866 "lex.xng_markdown.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * xng_markdownlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( xng_markdownwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of xng_markdownlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					xng_markdownrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			xng_markdownrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) xng_markdownrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 401 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 401 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 400);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					xng_markdownrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( xng_markdownwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void xng_markdownrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        xng_markdownensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            xng_markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	xng_markdown_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	xng_markdown_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void xng_markdown_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		xng_markdownpop_buffer_state();
	 *		xng_markdownpush_buffer_state(new_buffer);
     */
	xng_markdownensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	xng_markdown_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (xng_markdownwrap()) processing, but the only time this flag
	 * is looked at is after xng_markdownwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void xng_markdown_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE xng_markdown_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) xng_markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in xng_markdown_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) xng_markdownalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in xng_markdown_create_buffer()" );

	b->yy_is_our_buffer = 1;

	xng_markdown_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with xng_markdown_create_buffer()
 * @param yyscanner The scanner object.
 */
    void xng_markdown_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		xng_markdownfree((void *) b->yy_ch_buf ,yyscanner );

	xng_markdownfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a xng_markdownrestart() or at EOF.
 */
    static void xng_markdown_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	xng_markdown_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then xng_markdown_init_buffer was _probably_
     * called from xng_markdownrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void xng_markdown_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		xng_markdown_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void xng_markdownpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	xng_markdownensure_buffer_stack(yyscanner);

	/* This block is copied from xng_markdown_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from xng_markdown_switch_to_buffer. */
	xng_markdown_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void xng_markdownpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	xng_markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		xng_markdown_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void xng_markdownensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)xng_markdownalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in xng_markdownensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)xng_markdownrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in xng_markdownensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE xng_markdown_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) xng_markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in xng_markdown_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	xng_markdown_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to xng_markdownlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       xng_markdown_scan_bytes() instead.
 */
YY_BUFFER_STATE xng_markdown_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return xng_markdown_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to xng_markdownlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE xng_markdown_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) xng_markdownalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in xng_markdown_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = xng_markdown_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in xng_markdown_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE xng_markdownget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int xng_markdownget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int xng_markdownget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *xng_markdownget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *xng_markdownget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t xng_markdownget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *xng_markdownget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void xng_markdownset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void xng_markdownset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "xng_markdownset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void xng_markdownset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "xng_markdownset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see xng_markdown_switch_to_buffer
 */
void xng_markdownset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void xng_markdownset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int xng_markdownget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void xng_markdownset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* xng_markdownlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int xng_markdownlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) xng_markdownalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* xng_markdownlex_init_extra has the same functionality as xng_markdownlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to xng_markdownalloc in
 * the yyextra field.
 */

int xng_markdownlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    xng_markdownset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) xng_markdownalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    xng_markdownset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from xng_markdownlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * xng_markdownlex_init()
     */
    return 0;
}

/* xng_markdownlex_destroy is for both reentrant and non-reentrant scanners. */
int xng_markdownlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		xng_markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		xng_markdownpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	xng_markdownfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        xng_markdownfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * xng_markdownlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    xng_markdownfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *xng_markdownalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *xng_markdownrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void xng_markdownfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see xng_markdownrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 78 "markdown.grammar"



int xng_markdownwrap(yyscan_t yyscanner){return 1;}

