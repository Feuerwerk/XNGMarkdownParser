//
// Copyright 2011-2014 NimbusKit
// Copyright 2014 XING AG
//
// Autogenerated by flex using Jeff Verkoeyen's Markdown grammar
// with additions by XING AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#define YY_NO_INPUT

#include "XNGMarkdownTokens.h"

#line 3 "lex.markdown.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION    2
#define YY_FLEX_MINOR_VERSION    5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN (-32767 - 1)
#endif
#ifndef INT32_MIN
#define INT32_MIN (-2147483647 - 1)
#endif
#ifndef INT8_MAX
#define INT8_MAX (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else   /* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif  /* defined (__STDC__) */
#endif  /* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int)(unsigned char)c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void *yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin          yyg->yyin_r
#define yyout         yyg->yyout_r
#define yyextra       yyg->yyextra_r
#define yyleng        yyg->yyleng_r
#define yytext        yyg->yytext_r
#define yylineno      (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn      (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE  YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE markdownrestart(yyin, yyscanner)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE   1
#define EOB_ACT_LAST_MATCH    2

    #define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
    do \
    { \
        /* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg); \
        *yy_cp = yyg->yy_hold_char; \
        YY_RESTORE_YY_MORE_OFFSET \
        yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION;         /* set up yytext again */ \
    } \
    while ( 0 )

#define unput(c) yyunput(c, yyg->yytext_ptr, yyscanner)

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
    FILE *yy_input_file;

    char *yy_ch_buf;                    /* input buffer */
    char *yy_buf_pos;                   /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    yy_size_t yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;

#define YY_BUFFER_NEW    0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via markdownrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER (yyg->yy_buffer_stack \
                           ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                           : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void markdownrestart(FILE *input_file, yyscan_t yyscanner);
void markdown_switch_to_buffer(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner);
YY_BUFFER_STATE markdown_create_buffer(FILE *file, int size, yyscan_t yyscanner);
void markdown_delete_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner);
void markdown_flush_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner);
void markdownpush_buffer_state(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner);
void markdownpop_buffer_state(yyscan_t yyscanner);

static void markdownensure_buffer_stack(yyscan_t yyscanner);
static void markdown_load_buffer_state(yyscan_t yyscanner);
static void markdown_init_buffer(YY_BUFFER_STATE b, FILE *file, yyscan_t yyscanner);

#define YY_FLUSH_BUFFER markdown_flush_buffer(YY_CURRENT_BUFFER, yyscanner)

YY_BUFFER_STATE markdown_scan_buffer(char *base, yy_size_t size, yyscan_t yyscanner);
YY_BUFFER_STATE markdown_scan_string(yyconst char *yy_str, yyscan_t yyscanner);
YY_BUFFER_STATE markdown_scan_bytes(yyconst char *bytes, yy_size_t len, yyscan_t yyscanner);

void *markdownalloc(yy_size_t, yyscan_t yyscanner);
void *markdownrealloc(void *, yy_size_t, yyscan_t yyscanner);
void markdownfree(void *, yyscan_t yyscanner);

#define yy_new_buffer markdown_create_buffer

#define yy_set_interactive(is_interactive) \
    { \
        if ( !YY_CURRENT_BUFFER ) { \
            markdownensure_buffer_stack(yyscanner); \
            YY_CURRENT_BUFFER_LVALUE =    \
                markdown_create_buffer(yyin, YY_BUF_SIZE, yyscanner); \
        } \
        YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
    }

#define yy_set_bol(at_bol) \
    { \
        if ( !YY_CURRENT_BUFFER ) { \
            markdownensure_buffer_stack(yyscanner); \
            YY_CURRENT_BUFFER_LVALUE =    \
                markdown_create_buffer(yyin, YY_BUF_SIZE, yyscanner); \
        } \
        YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
    }

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state(yyscan_t yyscanner);
static yy_state_type yy_try_NUL_trans(yy_state_type current_state, yyscan_t yyscanner);
static int yy_get_next_buffer(yyscan_t yyscanner);
static void yy_fatal_error(yyconst char msg[], yyscan_t yyscanner);

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
    yyg->yytext_ptr = yy_bp; \
    yyleng = (yy_size_t)(yy_cp - yy_bp); \
    yyg->yy_hold_char = *yy_cp; \
    *yy_cp = '\0'; \
    yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES     16
#define YY_END_OF_BUFFER 17
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
    flex_int32_t yy_verify;
    flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[376] =
{0,
 14,   14,   17,   15,   13,   13,   13,   15,   15,   14,
 14,   14,   15,   15,   15,   15,   15,   15,   15,   15,
 15,   15,   15,   15,    6,   15,    0,    0,   12,   14,
 14,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1,    0,    0,    0,   14,    0,    0,    0,    0,    0,
 0,    0,   14,   14,    0,    0,    0,    0,    0,    0,
 0,    1,    0,    5,    0,    0,    0,    0,    0,    0,
 0,    6,    6,   10,    0,    0,   12,   11,   14,    0,
 0,    0,    0,    0,    0,    1,    0,    1,    0,    0,
 0,    0,    0,    8,    0,    0,    0,   14,   14,    0,

 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 0,    0,    0,    0,    0,    0,    6,    7,    0,    0,
 0,    7,    0,    0,    0,    0,    0,    0,    2,    8,
 0,    8,    8,    0,    8,    8,    0,    0,    0,   14,
 14,    0,    7,    0,    0,    0,    0,    0,    0,    7,
 0,    0,    0,    0,    0,    0,    2,    4,    6,    2,
 2,    7,    0,    0,    0,    0,    0,    8,    0,    8,
 8,    8,    0,    8,    8,    8,    8,    0,    0,    0,
 0,    0,    0,    0,    0,    0,    0,    0,    0,    8,
 0,    0,    0,    0,    7,    0,    0,    0,    0,    0,

 6,    0,    7,    3,    8,    8,    8,    8,    8,    8,
 8,    8,    8,    8,    8,    0,    8,    8,    0,    0,
 0,    9,    9,    0,    0,    9,    9,    8,    8,    0,
 0,    7,    0,    6,    3,    8,    8,    8,    8,    0,
 8,    8,    8,    8,    8,    0,    8,    8,    8,    8,
 8,    0,    8,    8,    8,    7,    0,    8,    0,    0,
 8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
 8,    8,    0,    8,    8,    8,    8,    8,    7,    8,
 0,    8,    8,    8,    8,    8,    8,    8,    8,    8,
 8,    8,    8,    8,    8,    8,    8,    0,    8,    8,

 8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
 8,    8,    8,    8,    8,    8,    0,    8,    8,    8,
 8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
 8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
 8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
 8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
 8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
 8,    8,    8,    8,    0};

static yyconst flex_int32_t yy_ec[256] =
{0,
 1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
 1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
 1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
 1,    5,    6,    6,    7,    6,    6,    6,    6,    8,
 9,   10,    6,    6,   11,   12,   13,   14,   14,   14,
 14,   14,   14,   14,   14,   14,   14,   15,    6,    6,
 16,    6,    6,    6,   14,   14,   14,   14,   14,   17,
 18,   19,   18,   18,   18,   18,   18,   18,   18,   20,
 18,   18,   21,   22,   18,   18,   18,   18,   18,   18,
 23,   24,   25,    6,   26,   27,   14,   14,   14,   14,

 14,   28,   18,   29,   18,   18,   18,   18,   18,   18,
 18,   30,   18,   18,   31,   32,   18,   18,   18,   18,
 18,   18,    6,    6,    6,   33,    1,   34,   34,   34,
 34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
 34,   34,   34,   35,   35,   35,   35,   35,   35,   35,
 35,   35,   35,   35,   35,   35,   35,   35,   35,   36,
 36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
 36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
 36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
 36,   37,   37,   38,   38,   38,   38,   38,   38,   38,

 38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
 38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
 38,   38,   38,   39,   40,   40,   40,   40,   40,   40,
 40,   40,   40,   40,   40,   40,   41,   40,   40,   42,
 43,   43,   43,   44,   37,   37,   37,   37,   37,   37,
 37,   37,   37,   37,   37};

static yyconst flex_int32_t yy_meta[45] =
{0,
 1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
 3,    4,    5,    3,    2,    6,    3,    3,    3,    3,
 3,    3,    7,    3,    2,    2,    2,    3,    3,    3,
 3,    3,    2,    3,    3,    3,    3,    3,    3,    3,
 3,    3,    3,    3};

static yyconst flex_int16_t yy_base[425] =
{0,
 0,   38, 1017, 1011, 1007, 1005,   47,   43,   91,  131,
 25,   26,   48,  175,   56,   53,   51,  103,  961,  106,
 28,   38,  120,  958,  140,  153,  988,   44,  985,   78,
 976,  162,  154,  165,  177,  178,  181,  184,  183,  172,
 192,  956,  218,  262,  943,  173,  155,  257,  260,  261,
 265,  132,  255,  256,  279,  294,  283,    0,  318,  280,
 298,  286,  271,  284,  310,  303,  313,  316,  319,  322,
 328,  939,  203,  938,  354,  357,  933,  325,  324,  341,
 358,  364,  367,  371,  375,  930,  919, 3619,  369,  323,
 371,  380,  411,  455,  499,  876,  526,  493,  492,  512,

 180,  523,  372,  517,  495,  553,  861,  507,  506,  533,
 542,  518,  543,  538,  548,  551,  277, 3619,  558,  561,
 566,  875,  381,  874,  865,  588,  568,  595,  600,  611,
 655,  860,  683,  727,    0,  754,  649,  781,  268,  330,
 721,  737,  292,  653,  763,  834,  651,  654,  808,  831,
 549,  809,  762,  802,  562,  721,  563,  574,  401,  824,
 3619,  811,  671,  808,  796,  786,  735,    0,  836,    0,
 863,    0,  891,  789,  918,  792,  945,  776,  972,  577,
 767,  808,  661,  817,  820,  725,  785,  790,  837,  835,
 835,  727,  999, 1026,  755,  751,  709,  870,  654,  804,

 760,  669,  656,  606,    0, 1053,  858, 1080,    0, 1107,
 886, 1134,  900,  740,  867,  862, 1161,  756,  887, 1188,
 1216,  831,  364, 1258,  898,  605, 3619,  915, 1282,  911,
 1309,  553,  536,  550, 3619,  927, 1336,  941,  921,  939,
 1363,  947, 1390, 1417,  876,  952,  967, 1444, 1471,  948,
 1498, 1525,  366, 1553, 1597,  970,  996,  968,  992, 1030,
 1624,  974, 1651, 1678, 1035, 1705, 1732,  893, 1759, 1008,
 1786, 1025, 1059,  505, 1814, 1858,    0, 1885,  377, 1051,
 1052, 1912, 1058, 1939, 1966, 1993, 1059, 1060, 1087, 1079,
 2021, 2065, 2109,  318, 2136, 2163, 1085, 1086, 2190, 1087,

 1114, 2217, 1128, 1106, 1127, 1128, 2245, 2289,  258, 2317,
 2361,    0, 2388, 2415, 2442, 1133, 1140, 1123, 1153, 1169,
 1166, 1168, 1170,    0, 2470,    0, 2497,    0, 2525,  182,
 2552, 2579, 2606, 2633, 1187, 1248, 1249, 1261, 1274,    0,
 2660, 2687,    0, 2714, 2741, 2768, 2795, 2822, 1278, 1287,
 2849, 2876, 2903, 2930, 2957, 2984, 1204, 3011, 3038, 3065,
 3092, 3119, 1268, 3146, 3173, 3200, 3227, 1208, 3254, 1314,
 3281, 1330, 1325, 1341, 3619, 3309, 3316, 3323, 3330, 3337,
 3344, 3351, 3358, 3365, 3372, 3379, 3385, 3392, 3399, 3406,
 3413, 3420, 3425, 3431, 3438, 3445, 3452, 3459, 3466, 3473,

 143, 3479, 3486, 3493, 3500, 3505,   67, 3511, 3518, 3524,
 3529, 3533, 3537, 3543, 3549, 3555, 3562, 3569, 3576, 3583,
 3590, 3597, 3604, 3611};

static yyconst flex_int16_t yy_def[425] =
{0,
 375,    1,  375,  376,  376,  375,  376,  377,  375,    9,
 10,   10,  378,  379,  380,  381,  376,    9,    9,    9,
 9,    9,    9,    9,  382,    9,  376,  375,  375,    7,
 7,  376,  376,  376,  376,  376,  376,  376,  377,  383,
 384,    9,  375,  385,   10,    9,    9,    9,    9,    9,
 9,    9,   10,   10,  378,  386,  378,    9,    9,  380,
 387,  388,  381,  381,  389,    9,    9,    9,    9,    9,
 9,  382,  382,  376,    9,  375,  375,  375,    7,  376,
 376,  376,  376,  376,  376,  376,  383,  375,  383,  384,
 390,  391,  375,  375,  392,    9,    9,   10,   10,  378,

 386,  386,  386,  386,  393,    9,  387,  387,  388,  394,
 395,  389,  389,    9,    9,    9,  382,  375,  376,  376,
 376,  383,  376,  390,  375,  390,  391,  396,  376,  375,
 397,   94,  375,  398,   94,   94,  393,    9,  376,   10,
 10,  399,  386,  400,  393,  401,  393,  402,    9,  387,
 376,  394,  394,  375,  395,  403,  376,  389,  382,  376,
 375,  390,  376,  396,  375,  396,  376,  130,  404,  130,
 130,  133,  405,   94,   94,  406,   94,  407,    9,  376,
 399,  400,  408,  399,  399,  400,  409,  400,  400,  406,
 410,  393,  393,    9,  394,  376,  403,  403,  375,  376,

 382,  375,  396,  376,  130,  130,  411,  130,  133,  133,
 406,   94,  406,  412,  213,  413,   94,  411,  414,    9,
 375,  378,  386,  400,  409,  376,  375,  213,  213,  193,
 9,  403,  375,  382,  375,  411,  130,  411,  411,  415,
 130,  412,  133,   94,  412,  416,  213,  229,   94,  411,
 411,    9,  417,  375,  418,  400,  409,  229,  193,    9,
 130,  411,  251,  130,  412,  133,   94,  412,  412,  248,
 94,  251,    9,  254,  375,  419,  254,  254,  409,  229,
 193,  130,  263,  130,  133,   94,  269,  248,   94,  251,
 375,  375,  420,  254,  254,  254,  229,  193,  130,  263,

 130,  133,   94,  269,  248,  251,  375,  421,  292,  375,
 422,  292,  292,  254,  254,  229,  193,  130,  263,  133,
 269,  248,  251,  307,  423,  307,  307,  310,  424,  292,
 292,  292,  254,  254,  229,  263,  269,  248,  251,  307,
 307,  307,  310,  310,  292,  292,  254,  254,  263,  269,
 307,  307,  310,  292,  292,  254,  254,  307,  307,  310,
 292,  292,  254,  307,  307,  310,  292,  292,  307,  307,
 310,  292,  307,  310,    0,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,

 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  375};

static yyconst flex_int16_t yy_nxt[3664] =
{0,
 4,    5,    6,    4,    7,    4,    4,    4,    4,    8,
 9,    4,    4,   10,    4,    4,   11,   10,   12,   10,
 10,   10,   13,   14,    4,   15,   16,   11,   12,   10,
 10,   10,   17,    9,    9,    9,    9,   18,   19,   20,
 21,   22,   23,   24,   25,   40,   53,   54,   26,   28,
 56,   30,   41,   28,   76,   28,   53,   54,   61,   76,
 31,   68,   68,   31,   31,   31,   31,   31,   31,  218,
 27,   57,   69,   69,   31,   31,   31,   31,   31,   64,
 78,   62,   79,   65,   32,   33,   34,   35,   36,   37,
 38,   27,   27,   28,   27,   27,   27,   27,   27,   27,

 27,   42,   43,   27,   42,   27,   27,   42,   42,   42,
 42,   42,   42,   27,   44,   27,   27,   27,   42,   42,
 42,   42,   42,   27,   42,   42,   42,   42,   42,   42,
 42,   42,   42,   42,   42,   31,   45,   45,   45,   67,
 67,   67,   28,   93,   45,  190,   73,   45,   45,   45,
 45,   45,   45,   70,   70,   70,   28,   74,   45,   45,
 45,   45,   45,   75,   28,   71,   93,   28,   46,   47,
 48,   49,   50,   51,   52,   27,   27,   28,   27,   28,
 28,   88,   89,   28,   93,   40,   28,   89,   59,   80,
 66,   59,   86,  291,   91,   31,   31,   31,   81,   81,

 81,   92,   59,  103,  104,   28,   45,   45,   45,  117,
 82,   82,   83,   83,   84,   84,   84,   85,   27,   27,
 28,   27,   27,   27,   27,   27,   27,   27,   94,   27,
 27,   94,   27,   27,   94,   94,   94,   94,   94,   94,
 27,   95,   27,   27,   27,   94,   94,   94,   94,   94,
 27,   94,   94,   94,   94,   94,   94,   94,   94,   94,
 94,   94,   27,   27,   28,   27,   93,   93,   93,  291,
 28,   93,   93,   28,   98,   97,   93,   99,   97,   28,
 180,   56,   61,  159,   98,   56,   28,   99,  110,   97,
 67,   67,   67,   68,   68,   69,   69,   64,   70,   70,

 70,   27,   57,  100,  102,   86,   57,  100,  108,  102,
 64,  111,   28,  108,   93,  103,  104,  103,  104,   58,
 105,   58,   58,   88,   93,   91,   78,   93,   79,  291,
 93,  106,  123,   93,  106,   76,   45,   45,   45,   93,
 76,   93,  113,   28,  139,  106,   45,   45,   45,   45,
 45,   45,  114,  114,  114,  115,  115,  115,   74,  118,
 28,  116,  116,  116,   75,   93,   28,   76,   28,   28,
 27,  122,   76,   28,   31,   31,   31,   28,   88,   89,
 125,  126,  128,   28,   89,  227,  126,  103,  104,  129,
 160,   31,   31,   31,  101,  103,  104,   31,   31,   31,

 119,  119,  119,   28,  120,  120,  120,  201,  121,  121,
 121,   27,   27,   28,   27,   27,   27,   27,   27,   27,
 27,  130,   27,   27,  130,   27,   27,  130,  130,  130,
 130,  130,  130,   27,  131,   27,   27,   27,  130,  130,
 130,  130,  130,   27,  130,  130,  130,  130,  130,  130,
 130,  130,  130,  130,  130,   27,   27,   28,   27,   27,
 27,   27,   27,   27,   27,  132,   43,  133,  132,   27,
 27,  132,  132,  132,  132,  132,  132,   27,  134,   27,
 27,   27,  132,  132,  132,  132,  132,   27,  132,  132,
 132,  132,  132,  132,  132,  132,  132,  132,  132,   27,

 27,   28,   27,   93,   93,  145,  146,  139,  110,  150,
 76,  141,  136,  140,   56,  136,  291,  108,  148,  142,
 28,  141,  108,  140,  144,  143,  136,   96,  137,   96,
 96,  151,   88,  102,   27,   57,  100,   93,  102,  138,
 103,  104,  138,  153,  156,   28,  103,  104,  153,   93,
 113,   28,   28,  138,   58,  105,   58,   58,  154,   93,
 28,  235,   93,   28,  156,   28,  149,  157,   28,  149,
 128,   45,   45,   45,  160,  158,   28,  163,  199,   28,
 149,   45,   45,   45,   45,   45,   45,  196,  200,  221,
 162,   31,   31,   31,   31,   31,   31,  125,  126,   31,

 31,   31,   28,  126,  165,  166,  158,   28,   28,  167,
 166,   27,   27,   28,   27,   27,   27,   27,   27,   27,
 27,  168,   27,  133,  168,   27,   27,  168,  168,  168,
 168,  168,  168,   27,  169,   27,   27,   27,  168,  168,
 168,  168,  168,   27,  168,  168,  168,  168,  168,  168,
 168,  168,  168,  168,  168,   27,   27,   28,   27,  145,
 178,  101,  178,  225,   76,  165,  375,  193,  171,  226,
 193,  171,  148,   28,  148,  187,  188,  189,  235,  233,
 167,  193,  171,   27,   27,   28,   27,   27,   27,   27,
 27,   27,   27,  172,   27,  133,  172,   27,   27,  172,

 172,  172,  172,  172,  172,   27,  173,   27,   27,   27,
 172,  172,  172,  172,  172,   27,  172,  172,  172,  172,
 172,  172,  172,  172,  172,  172,  172,   27,   27,   28,
 27,  198,   93,  223,  199,  139,  198,   28,  178,  182,
 175,  140,  375,  175,  204,   55,  199,  187,  188,  189,
 148,  140,  214,   28,  175,  135,  176,  135,  135,  183,
 184,  185,   28,  246,  195,  118,  234,  177,  214,  182,
 177,  375,  153,  145,  178,  222,  200,  153,   76,  240,
 154,  177,   96,  137,   96,   96,  148,  154,  203,  183,
 184,  185,   93,  227,  179,  165,  166,  179,  223,  219,

 93,  166,  213,  146,  214,  202,   28,   76,  179,   58,
 105,   58,   58,  188,  189,  216,  223,  165,  224,  182,
 125,  194,  182,  224,  194,  222,   28,  161,  222,  204,
 187,  188,  189,   56,  154,  194,   27,   27,   28,   27,
 184,  185,  183,  184,  185,  223,  146,  214,  229,  206,
 375,  229,  206,   27,   57,  100,   88,  191,  216,  187,
 188,  189,  229,  206,  170,  207,  170,  170,  238,  375,
 214,   93,  232,   76,  161,  248,  208,  215,  248,  208,
 198,  240,  375,  125,   88,  198,   88,   93,  214,  248,
 208,   27,   27,   28,   27,  199,  213,  178,  214,  246,

 251,   76,  118,  251,  210,  214,  227,  210,  257,  216,
 213,  178,  214,  257,  251,   76,  246,  375,  210,  174,
 211,  174,  174,  216,  259,  215,  146,  259,   88,   93,
 375,  212,   28,  214,  212,   77,  375,  238,  259,  214,
 28,   28,   76,  118,  240,  212,  135,  176,  135,  135,
 240,  238,  263,  214,   93,  263,   76,  265,  217,  214,
 214,  217,   76,  375,  240,  269,  263,   93,  269,  375,
 246,  240,  217,   96,  137,   96,   96,  215,  223,  269,
 31,  280,  375,   93,  280,  220,  214,   77,  220,  375,
 28,   71,  187,  188,  189,  280,   66,  240,  279,  220,

 192,  192,  192,  192,  227,  281,  257,   29,  281,   28,
 178,  257,  230,   28,  375,  230,  375,  375,  375,  281,
 375,  288,  148,  375,  288,  375,  230,   58,  105,   58,
 58,   58,  105,   58,   58,  288,  375,  118,  290,  231,
 375,  290,  231,  375,  375,  265,  375,  214,  375,  375,
 76,  375,  290,  231,  205,  236,  205,  205,  246,  375,
 96,  137,   96,   96,  297,  298,  237,  297,  298,  237,
 93,  300,  304,  305,  300,  304,  305,  375,  297,  298,
 237,  170,  207,  170,  170,  300,  304,  305,  135,  176,
 135,  135,  306,  241,  375,  306,  241,  375,  316,  317,

 319,  316,  317,  319,  375,  375,  306,  241,  209,  242,
 209,  209,  316,  317,  319,  170,  207,  170,  170,  321,
 243,  375,  321,  243,  205,  236,  205,  205,  375,  174,
 211,  174,  174,  321,  243,  174,  211,  174,  174,   93,
 322,  323,  375,  322,  323,   93,  335,  244,  375,  335,
 244,  375,  375,  147,  322,  323,  147,  375,  375,  375,
 335,  244,  135,  176,  135,  135,  336,  147,  375,  336,
 209,  242,  209,  209,  249,  375,  375,  249,  375,  337,
 336,  338,  337,  339,  338,  375,  339,  375,  249,   96,
 137,   96,   96,  337,  375,  338,  375,  339,  375,   93,

 215,  252,  375,  215,  252,  277,  105,  277,   58,  312,
 176,  312,  135,  375,  215,  252,  253,  253,   28,  253,
 27,  253,  253,  253,  253,  253,  254,  253,  253,  254,
 253,  253,  254,  254,  254,  254,  254,  254,  253,  255,
 253,  253,  253,  254,  254,  254,  254,  254,  253,  254,
 254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
 256,  349,  350,  375,  349,  350,  223,  375,  224,  294,
 137,  294,   96,  224,  215,  349,  350,  215,  375,  291,
 187,  188,  189,  228,  228,  228,  228,  239,  215,  375,
 239,  239,  215,  146,  239,  258,  375,  375,  258,  375,

 245,  239,  375,  245,  375,  239,  375,  375,  375,  258,
 58,  105,   58,   58,  245,  326,  207,  326,  170,  375,
 375,  375,  260,  375,  375,  260,  340,  236,  340,  205,
 375,  330,  211,  330,  174,  375,  260,  205,  236,  205,
 205,  291,  343,  242,  343,  209,  375,  375,  375,  261,
 375,  375,  261,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  261,  170,  207,  170,  170,  375,  375,
 375,  375,  375,  375,  375,  375,  264,  375,  375,  264,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 264,  209,  242,  209,  209,  375,  375,  375,  375,  375,

 375,  375,  375,  266,  375,  375,  266,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  266,  174,  211,
 174,  174,  375,  375,  375,  375,  375,  375,   93,  375,
 267,  375,  375,  267,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  267,  247,  247,  247,  247,  375,
 375,  375,  375,  375,  375,  178,  375,  270,  375,  375,
 270,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  270,  135,  176,  135,  135,  375,  375,  375,  375,
 375,  375,  375,  375,  271,  375,  375,  271,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  271,  250,

 250,  250,  250,  375,  375,  375,  375,  375,  375,  375,
 214,  272,  375,  375,  272,  375,  375,  375,  375,  375,
 375,  240,  375,  375,  375,  272,   96,  137,   96,   96,
 375,  375,  375,  375,  375,  375,   93,  375,  273,  375,
 375,  273,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  273,  253,  253,   28,  253,   27,  253,  253,
 253,  253,  253,  274,  275,  253,  274,  253,  253,  274,
 274,  274,  274,  274,  274,  253,  276,  253,  253,  253,
 274,  274,  274,  274,  274,  253,  274,  274,  274,  274,
 274,  274,  274,  274,  274,  274,  274,  253,  253,   28,

 253,   58,  375,  375,  375,  375,  375,  375,  375,  375,
 278,  375,  375,  278,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  278,  205,  236,  205,  205,  375,
 375,  375,  375,  375,  375,  375,  375,  282,  375,  375,
 282,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  282,  262,  262,  262,  262,  375,  375,  375,  375,
 375,  375,  375,  375,  283,  375,  375,  283,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  283,  170,
 207,  170,  170,  375,  375,  375,  375,  375,  375,  375,
 375,  284,  375,  375,  284,  375,  375,  375,  375,  375,

 375,  375,  375,  375,  375,  284,  209,  242,  209,  209,
 375,  375,  375,  375,  375,  375,  375,  375,  285,  375,
 375,  285,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  285,  174,  211,  174,  174,  375,  375,  375,
 375,  375,  375,   93,  375,  286,  375,  375,  286,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  286,
 268,  268,  268,  268,  375,  375,  375,  375,  375,  375,
 375,  214,  287,  375,  375,  287,  375,  375,  375,  375,
 375,  375,  246,  375,  375,  375,  287,  135,  176,  135,
 135,  375,  375,  375,  375,  375,  375,  375,  375,  289,

 375,  375,  289,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  289,  253,  253,   28,  253,   27,  253,
 253,  253,  253,  253,  292,  253,  253,  292,  253,  253,
 292,  292,  292,  292,  292,  292,  253,  293,  253,  253,
 253,  292,  292,  292,  292,  292,  253,  292,  292,  292,
 292,  292,  292,  292,  292,  292,  292,  292,  253,  253,
 28,  253,   96,  375,  375,  375,  375,  375,  375,  375,
 375,  295,  375,  375,  295,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  295,  277,  105,  277,   58,
 375,  375,  375,  375,  375,  375,  375,  375,  296,  375,

 375,  296,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  296,  205,  236,  205,  205,  375,  375,  375,
 375,  375,  375,  375,  375,  299,  375,  375,  299,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  299,
 170,  207,  170,  170,  375,  375,  375,  375,  375,  375,
 375,  375,  301,  375,  375,  301,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  301,  209,  242,  209,
 209,  375,  375,  375,  375,  375,  375,  375,  375,  302,
 375,  375,  302,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  302,  174,  211,  174,  174,  375,  375,

 375,  375,  375,  375,   93,  375,  303,  375,  375,  303,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 303,  253,  253,   28,  253,   27,  253,  253,  253,  253,
 253,  307,  253,  253,  307,  253,  253,  307,  307,  307,
 307,  307,  307,  253,  308,  253,  253,  253,  307,  307,
 307,  307,  307,  253,  307,  307,  307,  307,  307,  307,
 307,  307,  307,  307,  307,  253,  253,   28,  253,   27,
 253,  253,  253,  253,  253,  309,  275,  310,  309,  253,
 253,  309,  309,  309,  309,  309,  309,  253,  311,  253,
 253,  253,  309,  309,  309,  309,  309,  253,  309,  309,

 309,  309,  309,  309,  309,  309,  309,  309,  309,  253,
 253,   28,  253,  135,  375,  375,  375,  375,  375,  375,
 375,  375,  313,  375,  375,  313,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  313,  294,  137,  294,
 96,  375,  375,  375,  375,  375,  375,  291,  375,  314,
 375,  375,  314,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  314,  277,  105,  277,   58,  375,  375,
 375,  375,  375,  375,  375,  375,  315,  375,  375,  315,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 315,  205,  236,  205,  205,  375,  375,  375,  375,  375,

 375,  375,  375,  318,  375,  375,  318,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  318,  209,  242,
 209,  209,  375,  375,  375,  375,  375,  375,  375,  375,
 320,  375,  375,  320,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  320,  253,  253,   28,  253,   27,
 253,  253,  253,  253,  253,  324,  253,  310,  324,  253,
 253,  324,  324,  324,  324,  324,  324,  253,  325,  253,
 253,  253,  324,  324,  324,  324,  324,  253,  324,  324,
 324,  324,  324,  324,  324,  324,  324,  324,  324,  253,
 253,   28,  253,  170,  375,  375,  375,  375,  375,  375,

 375,  375,  327,  375,  375,  327,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  327,  253,  253,   28,
 253,   27,  253,  253,  253,  253,  253,  328,  253,  310,
 328,  253,  253,  328,  328,  328,  328,  328,  328,  253,
 329,  253,  253,  253,  328,  328,  328,  328,  328,  253,
 328,  328,  328,  328,  328,  328,  328,  328,  328,  328,
 328,  253,  253,   28,  253,  174,  375,  375,  375,  375,
 375,  375,  375,  375,  331,  375,  375,  331,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  331,  312,
 176,  312,  135,  375,  375,  375,  375,  375,  375,  375,

 375,  332,  375,  375,  332,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  332,  294,  137,  294,   96,
 375,  375,  375,  375,  375,  375,  291,  375,  333,  375,
 375,  333,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  333,  277,  105,  277,   58,  375,  375,  375,
 375,  375,  375,  375,  375,  334,  375,  375,  334,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  334,
 253,  253,   28,  253,  205,  375,  375,  375,  375,  375,
 375,  375,  375,  341,  375,  375,  341,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  341,  326,  207,

 326,  170,  375,  375,  375,  375,  375,  375,  375,  375,
 342,  375,  375,  342,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  342,  253,  253,   28,  253,  209,
 375,  375,  375,  375,  375,  375,  375,  375,  344,  375,
 375,  344,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  344,  330,  211,  330,  174,  375,  375,  375,
 375,  375,  375,  291,  375,  345,  375,  375,  345,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  345,
 312,  176,  312,  135,  375,  375,  375,  375,  375,  375,
 375,  375,  346,  375,  375,  346,  375,  375,  375,  375,

 375,  375,  375,  375,  375,  375,  346,  294,  137,  294,
 96,  375,  375,  375,  375,  375,  375,  291,  375,  347,
 375,  375,  347,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  347,  277,  105,  277,   58,  375,  375,
 375,  375,  375,  375,  375,  375,  348,  375,  375,  348,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 348,  340,  236,  340,  205,  375,  375,  375,  375,  375,
 375,  375,  375,  351,  375,  375,  351,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  351,  326,  207,
 326,  170,  375,  375,  375,  375,  375,  375,  375,  375,

 352,  375,  375,  352,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  352,  343,  242,  343,  209,  375,
 375,  375,  375,  375,  375,  375,  375,  353,  375,  375,
 353,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  353,  330,  211,  330,  174,  375,  375,  375,  375,
 375,  375,  291,  375,  354,  375,  375,  354,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  354,  312,
 176,  312,  135,  375,  375,  375,  375,  375,  375,  375,
 375,  355,  375,  375,  355,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  355,  294,  137,  294,   96,

 375,  375,  375,  375,  375,  375,  291,  375,  356,  375,
 375,  356,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  356,  277,  105,  277,   58,  375,  375,  375,
 375,  375,  375,  375,  375,  357,  375,  375,  357,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  357,
 340,  236,  340,  205,  375,  375,  375,  375,  375,  375,
 375,  375,  358,  375,  375,  358,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  358,  326,  207,  326,
 170,  375,  375,  375,  375,  375,  375,  375,  375,  359,
 375,  375,  359,  375,  375,  375,  375,  375,  375,  375,

 375,  375,  375,  359,  343,  242,  343,  209,  375,  375,
 375,  375,  375,  375,  375,  375,  360,  375,  375,  360,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 360,  330,  211,  330,  174,  375,  375,  375,  375,  375,
 375,  291,  375,  361,  375,  375,  361,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  361,  312,  176,
 312,  135,  375,  375,  375,  375,  375,  375,  375,  375,
 362,  375,  375,  362,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  362,  294,  137,  294,   96,  375,
 375,  375,  375,  375,  375,  291,  375,  363,  375,  375,

 363,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  363,  340,  236,  340,  205,  375,  375,  375,  375,
 375,  375,  375,  375,  364,  375,  375,  364,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  364,  326,
 207,  326,  170,  375,  375,  375,  375,  375,  375,  375,
 375,  365,  375,  375,  365,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  365,  343,  242,  343,  209,
 375,  375,  375,  375,  375,  375,  375,  375,  366,  375,
 375,  366,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  366,  330,  211,  330,  174,  375,  375,  375,

 375,  375,  375,  291,  375,  367,  375,  375,  367,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  367,
 312,  176,  312,  135,  375,  375,  375,  375,  375,  375,
 375,  375,  368,  375,  375,  368,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  368,  340,  236,  340,
 205,  375,  375,  375,  375,  375,  375,  375,  375,  369,
 375,  375,  369,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  369,  326,  207,  326,  170,  375,  375,
 375,  375,  375,  375,  375,  375,  370,  375,  375,  370,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,

 370,  343,  242,  343,  209,  375,  375,  375,  375,  375,
 375,  375,  375,  371,  375,  375,  371,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  371,  330,  211,
 330,  174,  375,  375,  375,  375,  375,  375,  291,  375,
 372,  375,  375,  372,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  372,  340,  236,  340,  205,  375,
 375,  375,  375,  375,  375,  375,  375,  373,  375,  375,
 373,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  373,  343,  242,  343,  209,  375,  375,  375,  375,
 375,  375,  375,  375,  374,  375,  375,  374,  375,  375,

 375,  375,  375,  375,  375,  375,  375,  375,  374,   27,
 27,   27,   27,   27,   27,   27,   39,   39,   39,   39,
 39,   39,   39,   55,   55,   55,   55,   55,   55,   55,
 58,   58,   58,   58,   58,   58,   58,   60,   60,   60,
 60,   60,   60,   60,   63,   63,   63,   63,   63,   63,
 63,   72,   72,   72,   72,   72,   72,   72,   87,   87,
 87,   87,   87,   87,   87,   90,   90,   90,   90,   90,
 90,   90,   96,   96,   96,   96,   96,   96,   96,  101,
 101,  101,  101,  101,  101,  107,  107,  107,  107,  107,
 107,  107,  109,  109,  109,  109,  109,  109,  109,  112,

 112,  112,  112,  112,  112,  112,  124,  124,  124,  124,
 124,  124,  124,  127,  127,  127,  127,  127,  127,  127,
 135,  135,  135,  135,  135,  135,  135,  147,  147,  375,
 147,  152,  152,  152,  152,  152,  152,  152,  155,  155,
 155,  155,  155,  155,  155,  164,  164,  164,  164,  164,
 164,  164,  170,  170,  170,  170,  170,  170,  170,  174,
 174,  174,  174,  174,  174,  174,  181,  181,  181,  181,
 181,  181,  181,  186,  186,  186,  186,  186,  186,  186,
 192,  192,  192,  192,  192,  192,  197,  197,  197,  197,
 197,  197,  197,  205,  205,  205,  205,  205,  205,  205,

 209,  209,  209,  209,  209,  209,  209,  215,  215,  215,
 215,  183,  183,  183,  183,  183,  183,  183,  187,  187,
 187,  187,  187,  187,  187,  228,  228,  228,  228,  228,
 228,  239,  375,  239,  239,  245,  375,  245,  247,  247,
 247,  247,  247,  247,  250,  250,  250,  250,  250,  250,
 262,  262,  262,  262,  262,  262,  268,  268,  268,  268,
 268,  268,  253,  253,  253,  253,  253,  253,  253,  277,
 277,  277,  277,  277,  277,  277,  294,  294,  294,  294,
 294,  294,  294,  312,  312,  312,  312,  312,  312,  312,
 326,  326,  326,  326,  326,  326,  326,  330,  330,  330,

 330,  330,  330,  330,  340,  340,  340,  340,  340,  340,
 340,  343,  343,  343,  343,  343,  343,  343,    3,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375};

static yyconst flex_int16_t yy_chk[3664] =
{0,
 1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
 1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
 1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
 1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
 1,    1,    1,    1,    2,    8,   11,   12,    2,    7,
 13,    7,    8,   17,   28,   16,   11,   12,   15,   28,
 7,   21,   21,    7,    7,    7,    7,    7,    7,  407,
 13,   13,   22,   22,    7,    7,    7,    7,    7,   16,
 30,   15,   30,   17,    7,    7,    7,    7,    7,    7,
 7,    9,    9,    9,    9,    9,    9,    9,    9,    9,

 9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
 9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
 9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
 9,    9,    9,    9,    9,   10,   18,   18,   18,   20,
 20,   20,   25,   52,   10,  401,   25,   10,   10,   10,
 10,   10,   10,   23,   23,   23,   33,   26,   10,   10,
 10,   10,   10,   26,   32,   52,   47,   34,   10,   10,
 10,   10,   10,   10,   10,   14,   14,   14,   14,   35,
 36,   40,   40,   37,   46,   39,   38,   40,   14,   33,
 47,   14,   39,  330,   41,   32,   32,   32,   34,   34,

 34,   41,   14,  101,  101,   73,   46,   46,   46,   73,
 35,   35,   36,   36,   37,   37,   37,   38,   43,   43,
 43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
 43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
 43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
 43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
 43,   43,   44,   44,   44,   44,   53,   54,   48,  309,
 139,   49,   50,   63,   53,   44,   51,   54,   44,  117,
 139,   55,   60,  117,   53,   57,   64,   54,   62,   44,
 48,   48,   48,   49,   49,   50,   50,   63,   51,   51,

 51,   55,   55,   55,   56,   60,   57,   57,   61,   56,
 64,   62,   65,   61,   66,  143,  143,   56,   56,   59,
 59,   59,   59,   61,   67,   90,   79,   68,   79,  294,
 69,   59,   90,   70,   59,   78,   66,   66,   66,   71,
 78,  140,   65,   80,  140,   59,   67,   67,   67,   68,
 68,   68,   69,   69,   69,   70,   70,   70,   75,   76,
 81,   71,   71,   71,   75,   75,   82,   76,  253,   83,
 253,   89,   76,   84,   80,   80,   80,   85,   89,   89,
 91,   91,   92,  123,   89,  279,   91,  223,  223,   92,
 123,   81,   81,   81,  103,  103,  103,   82,   82,   82,

 83,   83,   83,  159,   84,   84,   84,  159,   85,   85,
 85,   93,   93,   93,   93,   93,   93,   93,   93,   93,
 93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
 93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
 93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
 93,   93,   93,   93,   93,   94,   94,   94,   94,   94,
 94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
 94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
 94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
 94,   94,   94,   94,   94,   94,   94,   94,   94,   95,

 95,   95,   95,   99,   98,  105,  105,   98,  109,  108,
 105,   99,   95,   98,  100,   95,  274,  108,  105,  100,
 112,   99,  108,   98,  104,  102,   95,   97,   97,   97,
 97,  109,  108,  102,  100,  100,  100,   97,  102,   97,
 104,  104,   97,  110,  111,  113,  102,  102,  110,  114,
 112,  151,  234,   97,  106,  106,  106,  106,  110,  115,
 119,  233,  116,  120,  155,  157,  106,  111,  121,  106,
 127,  114,  114,  114,  151,  113,  158,  127,  232,  180,
 106,  115,  115,  115,  116,  116,  116,  155,  157,  180,
 126,  119,  119,  119,  120,  120,  120,  126,  126,  121,

 121,  121,  129,  126,  128,  128,  158,  226,  204,  129,
 128,  130,  130,  130,  130,  130,  130,  130,  130,  130,
 130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
 130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
 130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
 130,  130,  130,  130,  130,  131,  131,  131,  131,  137,
 137,  144,  147,  183,  137,  203,  147,  148,  131,  183,
 148,  131,  137,  163,  147,  144,  144,  144,  202,  199,
 163,  148,  131,  133,  133,  133,  133,  133,  133,  133,
 133,  133,  133,  133,  133,  133,  133,  133,  133,  133,

 133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
 133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
 133,  133,  133,  133,  133,  133,  133,  134,  134,  134,
 134,  156,  141,  186,  197,  141,  156,  167,  192,  142,
 134,  141,  192,  134,  167,  142,  156,  186,  186,  186,
 192,  141,  214,  196,  134,  136,  136,  136,  136,  142,
 142,  142,  201,  214,  153,  145,  201,  136,  218,  181,
 136,  218,  153,  145,  145,  181,  196,  153,  145,  218,
 195,  136,  138,  138,  138,  138,  145,  153,  166,  181,
 181,  181,  138,  187,  138,  166,  166,  138,  188,  178,

 174,  166,  176,  176,  176,  165,  200,  176,  138,  149,
 149,  149,  149,  188,  188,  176,  182,  164,  182,  184,
 162,  149,  185,  182,  149,  184,  160,  154,  185,  200,
 182,  182,  182,  222,  152,  149,  169,  169,  169,  169,
 184,  184,  185,  185,  185,  189,  190,  190,  191,  169,
 190,  191,  169,  222,  222,  222,  150,  146,  190,  189,
 189,  189,  191,  169,  171,  171,  171,  171,  207,  215,
 207,  132,  198,  207,  125,  216,  171,  215,  216,  171,
 198,  207,  215,  124,  122,  198,  107,   96,  245,  216,
 171,  173,  173,  173,  173,  198,  211,  211,  211,  245,

 219,  211,  213,  219,  173,  268,  225,  173,  225,  211,
 213,  213,  213,  225,  219,  213,  268,  228,  173,  175,
 175,  175,  175,  213,  230,  228,  228,  230,   87,  175,
 228,  175,   86,  239,  175,   77,  239,  236,  230,  236,
 74,   72,  236,  238,  239,  175,  177,  177,  177,  177,
 236,  238,  240,  238,   45,  240,  238,  242,  177,  242,
 250,  177,  242,  250,  238,  246,  240,   42,  246,  247,
 242,  250,  177,  179,  179,  179,  179,  247,  256,  246,
 31,  258,  247,  179,  258,  179,  262,   29,  179,  262,
 27,   24,  256,  256,  256,  258,   19,  262,  257,  179,

 193,  193,  193,  193,  257,  259,  257,    6,  259,    5,
 193,  257,  193,    4,  193,  193,    3,    0,    0,  259,
 0,  270,  193,    0,  270,    0,  193,  194,  194,  194,
 194,  260,  260,  260,  260,  270,    0,  265,  272,  194,
 0,  272,  194,    0,    0,  265,    0,  265,    0,    0,
 265,    0,  272,  194,  206,  206,  206,  206,  265,    0,
 273,  273,  273,  273,  280,  281,  206,  280,  281,  206,
 273,  283,  287,  288,  283,  287,  288,    0,  280,  281,
 206,  208,  208,  208,  208,  283,  287,  288,  289,  289,
 289,  289,  290,  208,    0,  290,  208,    0,  297,  298,

 300,  297,  298,  300,    0,    0,  290,  208,  210,  210,
 210,  210,  297,  298,  300,  301,  301,  301,  301,  304,
 210,    0,  304,  210,  318,  318,  318,  318,    0,  303,
 303,  303,  303,  304,  210,  212,  212,  212,  212,  303,
 305,  306,    0,  305,  306,  212,  316,  212,    0,  316,
 212,    0,    0,  317,  305,  306,  317,    0,    0,    0,
 316,  212,  217,  217,  217,  217,  319,  317,    0,  319,
 320,  320,  320,  320,  217,    0,    0,  217,    0,  321,
 319,  322,  321,  323,  322,    0,  323,    0,  217,  220,
 220,  220,  220,  321,    0,  322,    0,  323,    0,  220,

 335,  220,    0,  335,  220,  357,  357,  357,  357,  368,
 368,  368,  368,    0,  335,  220,  221,  221,  221,  221,
 221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
 221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
 221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
 221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
 224,  336,  337,    0,  336,  337,  224,    0,  224,  363,
 363,  363,  363,  224,  338,  336,  337,  338,    0,  363,
 224,  224,  224,  229,  229,  229,  229,  339,  338,    0,
 339,  349,  229,  229,  349,  229,    0,  229,  229,    0,

 350,  339,    0,  350,    0,  349,    0,    0,    0,  229,
 231,  231,  231,  231,  350,  370,  370,  370,  370,    0,
 0,    0,  231,    0,    0,  231,  373,  373,  373,  373,
 0,  372,  372,  372,  372,    0,  231,  237,  237,  237,
 237,  372,  374,  374,  374,  374,    0,    0,    0,  237,
 0,    0,  237,    0,    0,    0,    0,    0,    0,    0,
 0,    0,    0,  237,  241,  241,  241,  241,    0,    0,
 0,    0,    0,    0,    0,    0,  241,    0,    0,  241,
 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 241,  243,  243,  243,  243,    0,    0,    0,    0,    0,

 0,    0,    0,  243,    0,    0,  243,    0,    0,    0,
 0,    0,    0,    0,    0,    0,    0,  243,  244,  244,
 244,  244,    0,    0,    0,    0,    0,    0,  244,    0,
 244,    0,    0,  244,    0,    0,    0,    0,    0,    0,
 0,    0,    0,    0,  244,  248,  248,  248,  248,    0,
 0,    0,    0,    0,    0,  248,    0,  248,    0,    0,
 248,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 0,  248,  249,  249,  249,  249,    0,    0,    0,    0,
 0,    0,    0,    0,  249,    0,    0,  249,    0,    0,
 0,    0,    0,    0,    0,    0,    0,    0,  249,  251,

 251,  251,  251,    0,    0,    0,    0,    0,    0,    0,
 251,  251,    0,  251,  251,    0,    0,    0,    0,    0,
 0,  251,    0,    0,    0,  251,  252,  252,  252,  252,
 0,    0,    0,    0,    0,    0,  252,    0,  252,    0,
 0,  252,    0,    0,    0,    0,    0,    0,    0,    0,
 0,    0,  252,  254,  254,  254,  254,  254,  254,  254,
 254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
 254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
 254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
 254,  254,  254,  254,  254,  254,  254,  255,  255,  255,

 255,  255,    0,    0,    0,    0,    0,    0,    0,    0,
 255,    0,    0,  255,    0,    0,    0,    0,    0,    0,
 0,    0,    0,    0,  255,  261,  261,  261,  261,    0,
 0,    0,    0,    0,    0,    0,    0,  261,    0,    0,
 261,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 0,  261,  263,  263,  263,  263,    0,    0,    0,    0,
 0,    0,    0,    0,  263,    0,    0,  263,    0,    0,
 0,    0,    0,    0,    0,    0,    0,    0,  263,  264,
 264,  264,  264,    0,    0,    0,    0,    0,    0,    0,
 0,  264,    0,    0,  264,    0,    0,    0,    0,    0,

 0,    0,    0,    0,    0,  264,  266,  266,  266,  266,
 0,    0,    0,    0,    0,    0,    0,    0,  266,    0,
 0,  266,    0,    0,    0,    0,    0,    0,    0,    0,
 0,    0,  266,  267,  267,  267,  267,    0,    0,    0,
 0,    0,    0,  267,    0,  267,    0,    0,  267,    0,
 0,    0,    0,    0,    0,    0,    0,    0,    0,  267,
 269,  269,  269,  269,    0,    0,    0,    0,    0,    0,
 0,  269,  269,    0,    0,  269,    0,    0,    0,    0,
 0,    0,  269,    0,    0,    0,  269,  271,  271,  271,
 271,    0,    0,    0,    0,    0,    0,    0,    0,  271,

 0,    0,  271,    0,    0,    0,    0,    0,    0,    0,
 0,    0,    0,  271,  275,  275,  275,  275,  275,  275,
 275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
 275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
 275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
 275,  275,  275,  275,  275,  275,  275,  275,  276,  276,
 276,  276,  276,    0,    0,    0,    0,    0,    0,    0,
 0,  276,    0,    0,  276,    0,    0,    0,    0,    0,
 0,    0,    0,    0,    0,  276,  278,  278,  278,  278,
 0,    0,    0,    0,    0,    0,    0,    0,  278,    0,

 0,  278,    0,    0,    0,    0,    0,    0,    0,    0,
 0,    0,  278,  282,  282,  282,  282,    0,    0,    0,
 0,    0,    0,    0,    0,  282,    0,    0,  282,    0,
 0,    0,    0,    0,    0,    0,    0,    0,    0,  282,
 284,  284,  284,  284,    0,    0,    0,    0,    0,    0,
 0,    0,  284,    0,    0,  284,    0,    0,    0,    0,
 0,    0,    0,    0,    0,    0,  284,  285,  285,  285,
 285,    0,    0,    0,    0,    0,    0,    0,    0,  285,
 0,    0,  285,    0,    0,    0,    0,    0,    0,    0,
 0,    0,    0,  285,  286,  286,  286,  286,    0,    0,

 0,    0,    0,    0,  286,    0,  286,    0,    0,  286,
 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 286,  291,  291,  291,  291,  291,  291,  291,  291,  291,
 291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
 291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
 291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
 291,  291,  291,  291,  291,  292,  292,  292,  292,  292,
 292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
 292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
 292,  292,  292,  292,  292,  292,  292,  292,  292,  292,

 292,  292,  292,  292,  292,  292,  292,  292,  292,  293,
 293,  293,  293,  293,    0,    0,    0,    0,    0,    0,
 0,    0,  293,    0,    0,  293,    0,    0,    0,    0,
 0,    0,    0,    0,    0,    0,  293,  295,  295,  295,
 295,    0,    0,    0,    0,    0,    0,  295,    0,  295,
 0,    0,  295,    0,    0,    0,    0,    0,    0,    0,
 0,    0,    0,  295,  296,  296,  296,  296,    0,    0,
 0,    0,    0,    0,    0,    0,  296,    0,    0,  296,
 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 296,  299,  299,  299,  299,    0,    0,    0,    0,    0,

 0,    0,    0,  299,    0,    0,  299,    0,    0,    0,
 0,    0,    0,    0,    0,    0,    0,  299,  302,  302,
 302,  302,    0,    0,    0,    0,    0,    0,    0,    0,
 302,    0,    0,  302,    0,    0,    0,    0,    0,    0,
 0,    0,    0,    0,  302,  307,  307,  307,  307,  307,
 307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
 307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
 307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
 307,  307,  307,  307,  307,  307,  307,  307,  307,  308,
 308,  308,  308,  308,    0,    0,    0,    0,    0,    0,

 0,    0,  308,    0,    0,  308,    0,    0,    0,    0,
 0,    0,    0,    0,    0,    0,  308,  310,  310,  310,
 310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
 310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
 310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
 310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
 310,  311,  311,  311,  311,  311,    0,    0,    0,    0,
 0,    0,    0,    0,  311,    0,    0,  311,    0,    0,
 0,    0,    0,    0,    0,    0,    0,    0,  311,  313,
 313,  313,  313,    0,    0,    0,    0,    0,    0,    0,

 0,  313,    0,    0,  313,    0,    0,    0,    0,    0,
 0,    0,    0,    0,    0,  313,  314,  314,  314,  314,
 0,    0,    0,    0,    0,    0,  314,    0,  314,    0,
 0,  314,    0,    0,    0,    0,    0,    0,    0,    0,
 0,    0,  314,  315,  315,  315,  315,    0,    0,    0,
 0,    0,    0,    0,    0,  315,    0,    0,  315,    0,
 0,    0,    0,    0,    0,    0,    0,    0,    0,  315,
 325,  325,  325,  325,  325,    0,    0,    0,    0,    0,
 0,    0,    0,  325,    0,    0,  325,    0,    0,    0,
 0,    0,    0,    0,    0,    0,    0,  325,  327,  327,

 327,  327,    0,    0,    0,    0,    0,    0,    0,    0,
 327,    0,    0,  327,    0,    0,    0,    0,    0,    0,
 0,    0,    0,    0,  327,  329,  329,  329,  329,  329,
 0,    0,    0,    0,    0,    0,    0,    0,  329,    0,
 0,  329,    0,    0,    0,    0,    0,    0,    0,    0,
 0,    0,  329,  331,  331,  331,  331,    0,    0,    0,
 0,    0,    0,  331,    0,  331,    0,    0,  331,    0,
 0,    0,    0,    0,    0,    0,    0,    0,    0,  331,
 332,  332,  332,  332,    0,    0,    0,    0,    0,    0,
 0,    0,  332,    0,    0,  332,    0,    0,    0,    0,

 0,    0,    0,    0,    0,    0,  332,  333,  333,  333,
 333,    0,    0,    0,    0,    0,    0,  333,    0,  333,
 0,    0,  333,    0,    0,    0,    0,    0,    0,    0,
 0,    0,    0,  333,  334,  334,  334,  334,    0,    0,
 0,    0,    0,    0,    0,    0,  334,    0,    0,  334,
 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 334,  341,  341,  341,  341,    0,    0,    0,    0,    0,
 0,    0,    0,  341,    0,    0,  341,    0,    0,    0,
 0,    0,    0,    0,    0,    0,    0,  341,  342,  342,
 342,  342,    0,    0,    0,    0,    0,    0,    0,    0,

 342,    0,    0,  342,    0,    0,    0,    0,    0,    0,
 0,    0,    0,    0,  342,  344,  344,  344,  344,    0,
 0,    0,    0,    0,    0,    0,    0,  344,    0,    0,
 344,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 0,  344,  345,  345,  345,  345,    0,    0,    0,    0,
 0,    0,  345,    0,  345,    0,    0,  345,    0,    0,
 0,    0,    0,    0,    0,    0,    0,    0,  345,  346,
 346,  346,  346,    0,    0,    0,    0,    0,    0,    0,
 0,  346,    0,    0,  346,    0,    0,    0,    0,    0,
 0,    0,    0,    0,    0,  346,  347,  347,  347,  347,

 0,    0,    0,    0,    0,    0,  347,    0,  347,    0,
 0,  347,    0,    0,    0,    0,    0,    0,    0,    0,
 0,    0,  347,  348,  348,  348,  348,    0,    0,    0,
 0,    0,    0,    0,    0,  348,    0,    0,  348,    0,
 0,    0,    0,    0,    0,    0,    0,    0,    0,  348,
 351,  351,  351,  351,    0,    0,    0,    0,    0,    0,
 0,    0,  351,    0,    0,  351,    0,    0,    0,    0,
 0,    0,    0,    0,    0,    0,  351,  352,  352,  352,
 352,    0,    0,    0,    0,    0,    0,    0,    0,  352,
 0,    0,  352,    0,    0,    0,    0,    0,    0,    0,

 0,    0,    0,  352,  353,  353,  353,  353,    0,    0,
 0,    0,    0,    0,    0,    0,  353,    0,    0,  353,
 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 353,  354,  354,  354,  354,    0,    0,    0,    0,    0,
 0,  354,    0,  354,    0,    0,  354,    0,    0,    0,
 0,    0,    0,    0,    0,    0,    0,  354,  355,  355,
 355,  355,    0,    0,    0,    0,    0,    0,    0,    0,
 355,    0,    0,  355,    0,    0,    0,    0,    0,    0,
 0,    0,    0,    0,  355,  356,  356,  356,  356,    0,
 0,    0,    0,    0,    0,  356,    0,  356,    0,    0,

 356,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 0,  356,  358,  358,  358,  358,    0,    0,    0,    0,
 0,    0,    0,    0,  358,    0,    0,  358,    0,    0,
 0,    0,    0,    0,    0,    0,    0,    0,  358,  359,
 359,  359,  359,    0,    0,    0,    0,    0,    0,    0,
 0,  359,    0,    0,  359,    0,    0,    0,    0,    0,
 0,    0,    0,    0,    0,  359,  360,  360,  360,  360,
 0,    0,    0,    0,    0,    0,    0,    0,  360,    0,
 0,  360,    0,    0,    0,    0,    0,    0,    0,    0,
 0,    0,  360,  361,  361,  361,  361,    0,    0,    0,

 0,    0,    0,  361,    0,  361,    0,    0,  361,    0,
 0,    0,    0,    0,    0,    0,    0,    0,    0,  361,
 362,  362,  362,  362,    0,    0,    0,    0,    0,    0,
 0,    0,  362,    0,    0,  362,    0,    0,    0,    0,
 0,    0,    0,    0,    0,    0,  362,  364,  364,  364,
 364,    0,    0,    0,    0,    0,    0,    0,    0,  364,
 0,    0,  364,    0,    0,    0,    0,    0,    0,    0,
 0,    0,    0,  364,  365,  365,  365,  365,    0,    0,
 0,    0,    0,    0,    0,    0,  365,    0,    0,  365,
 0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

 365,  366,  366,  366,  366,    0,    0,    0,    0,    0,
 0,    0,    0,  366,    0,    0,  366,    0,    0,    0,
 0,    0,    0,    0,    0,    0,    0,  366,  367,  367,
 367,  367,    0,    0,    0,    0,    0,    0,  367,    0,
 367,    0,    0,  367,    0,    0,    0,    0,    0,    0,
 0,    0,    0,    0,  367,  369,  369,  369,  369,    0,
 0,    0,    0,    0,    0,    0,    0,  369,    0,    0,
 369,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 0,  369,  371,  371,  371,  371,    0,    0,    0,    0,
 0,    0,    0,    0,  371,    0,    0,  371,    0,    0,

 0,    0,    0,    0,    0,    0,    0,    0,  371,  376,
 376,  376,  376,  376,  376,  376,  377,  377,  377,  377,
 377,  377,  377,  378,  378,  378,  378,  378,  378,  378,
 379,  379,  379,  379,  379,  379,  379,  380,  380,  380,
 380,  380,  380,  380,  381,  381,  381,  381,  381,  381,
 381,  382,  382,  382,  382,  382,  382,  382,  383,  383,
 383,  383,  383,  383,  383,  384,  384,  384,  384,  384,
 384,  384,  385,  385,  385,  385,  385,  385,  385,  386,
 386,  386,  386,  386,  386,  387,  387,  387,  387,  387,
 387,  387,  388,  388,  388,  388,  388,  388,  388,  389,

 389,  389,  389,  389,  389,  389,  390,  390,  390,  390,
 390,  390,  390,  391,  391,  391,  391,  391,  391,  391,
 392,  392,  392,  392,  392,  392,  392,  393,  393,    0,
 393,  394,  394,  394,  394,  394,  394,  394,  395,  395,
 395,  395,  395,  395,  395,  396,  396,  396,  396,  396,
 396,  396,  397,  397,  397,  397,  397,  397,  397,  398,
 398,  398,  398,  398,  398,  398,  399,  399,  399,  399,
 399,  399,  399,  400,  400,  400,  400,  400,  400,  400,
 402,  402,  402,  402,  402,  402,  403,  403,  403,  403,
 403,  403,  403,  404,  404,  404,  404,  404,  404,  404,

 405,  405,  405,  405,  405,  405,  405,  406,  406,  406,
 406,  408,  408,  408,  408,  408,  408,  408,  409,  409,
 409,  409,  409,  409,  409,  410,  410,  410,  410,  410,
 410,  411,    0,  411,  411,  412,    0,  412,  413,  413,
 413,  413,  413,  413,  414,  414,  414,  414,  414,  414,
 415,  415,  415,  415,  415,  415,  416,  416,  416,  416,
 416,  416,  417,  417,  417,  417,  417,  417,  417,  418,
 418,  418,  418,  418,  418,  418,  419,  419,  419,  419,
 419,  419,  419,  420,  420,  420,  420,  420,  420,  420,
 421,  421,  421,  421,  421,  421,  421,  422,  422,  422,

 422,  422,  422,  422,  423,  423,  423,  423,  423,  423,
 423,  424,  424,  424,  424,  424,  424,  424,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
 375,  375,  375};

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "markdown.grammar"
/*
 * match unicode characters as one rule instead of each byte.
 * http://stackoverflow.com/questions/10252777/making-lex-to-read-utf-8-doesnt-work?lq=1
 */
/*
 * Greatly improves parser speed by passing whole phrases instead of chars
 */
#line 1376 "lex.markdown.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
{
    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE *yy_buffer_stack;  /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char *yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;
};     /* end struct yyguts_t */

static int yy_init_globals(yyscan_t yyscanner);

int markdownlex_init(yyscan_t *scanner);

int markdownlex_init_extra(YY_EXTRA_TYPE user_defined, yyscan_t *scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int markdownlex_destroy(yyscan_t yyscanner);

int markdownget_debug(yyscan_t yyscanner);

void markdownset_debug(int debug_flag, yyscan_t yyscanner);

YY_EXTRA_TYPE markdownget_extra(yyscan_t yyscanner);

void markdownset_extra(YY_EXTRA_TYPE user_defined, yyscan_t yyscanner);

FILE *markdownget_in(yyscan_t yyscanner);

void markdownset_in(FILE *in_str, yyscan_t yyscanner);

FILE *markdownget_out(yyscan_t yyscanner);

void markdownset_out(FILE *out_str, yyscan_t yyscanner);

yy_size_t markdownget_leng(yyscan_t yyscanner);

char *markdownget_text(yyscan_t yyscanner);

int markdownget_lineno(yyscan_t yyscanner);

void markdownset_lineno(int line_number, yyscan_t yyscanner);

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int markdownwrap(yyscan_t yyscanner);
#else
extern int markdownwrap(yyscan_t yyscanner);
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char *, yyconst char *, int, yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *, yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput(yyscan_t yyscanner);
#else
static int input(yyscan_t yyscanner);
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite(yytext, yyleng, 1, yyout)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size) \
    if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
    { \
        int c = '*'; \
        yy_size_t n; \
        for ( n = 0; n < max_size && \
              (c = getc(yyin)) != EOF && c != '\n'; ++n ) { \
            buf[n] = (char)c; } \
        if ( c == '\n' ) { \
            buf[n++] = (char)c; } \
        if ( c == EOF && ferror(yyin) ) { \
            YY_FATAL_ERROR("input in flex scanner failed"); } \
        result = n; \
    } \
    else \
    { \
        errno = 0; \
        while ( (result = fread(buf, 1, max_size, yyin)) == 0 && ferror(yyin)) \
        { \
            if ( errno != EINTR) \
            { \
                YY_FATAL_ERROR("input in flex scanner failed"); \
                break; \
            } \
            errno = 0; \
            clearerr(yyin); \
        } \
    } \
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error(msg, yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int markdownlex(yyscan_t yyscanner);

#define YY_DECL int markdownlex(yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
    if ( yyleng > 0 ) { \
        YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
            (yytext[yyleng - 1] == '\n'); } \
    YY_USER_ACTION

/** The main scanner function which does all the work.
 */
    YY_DECL
{
    register yy_state_type yy_current_state;
    register char *yy_cp, *yy_bp;
    register int yy_act;
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

#line 56 "markdown.grammar"


#line 1601 "lex.markdown.c"

    if ( !yyg->yy_init ) {
        yyg->yy_init = 1;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if ( !yyg->yy_start ) {
            yyg->yy_start = 1;                  /* first start state */
        }
        if ( !yyin ) {
            yyin = stdin;
        }

        if ( !yyout ) {
            yyout = stdout;
        }

        if ( !YY_CURRENT_BUFFER ) {
            markdownensure_buffer_stack(yyscanner);
            YY_CURRENT_BUFFER_LVALUE =
                markdown_create_buffer(yyin, YY_BUF_SIZE, yyscanner);
        }

        markdown_load_buffer_state(yyscanner);
    }

    while ( 1 ) {               /* loops until end-of-file is reached */
        yy_cp = yyg->yy_c_buf_p;

        /* Support of yytext. */
        *yy_cp = yyg->yy_hold_char;

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

        yy_current_state = yyg->yy_start;
        yy_current_state += YY_AT_BOL();
 yy_match:
        do {
            register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
            if ( yy_accept[yy_current_state] ) {
                yyg->yy_last_accepting_state = yy_current_state;
                yyg->yy_last_accepting_cpos = yy_cp;
            }
            while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state ) {
                yy_current_state = (int)yy_def[yy_current_state];
                if ( yy_current_state >= 376 ) {
                    yy_c = yy_meta[(unsigned int)yy_c];
                }
            }
            yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
            ++yy_cp;
        } while ( yy_base[yy_current_state] != 3619 );

 yy_find_action:
        yy_act = yy_accept[yy_current_state];
        if ( yy_act == 0 ) { /* have to back up */
            yy_cp = yyg->yy_last_accepting_cpos;
            yy_current_state = yyg->yy_last_accepting_state;
            yy_act = yy_accept[yy_current_state];
        }

        YY_DO_BEFORE_ACTION;

 do_action:     /* This label is used only to access EOF actions. */

        switch ( yy_act ) { /* beginning of action switch */
            case 0:             /* must back up */
                /* undo the effects of YY_DO_BEFORE_ACTION */
                *yy_cp = yyg->yy_hold_char;
                yy_cp = yyg->yy_last_accepting_cpos;
                yy_current_state = yyg->yy_last_accepting_state;
                goto yy_find_action;

            case 1:
/* rule 1 can match eol */
                YY_RULE_SETUP
#line 58 "markdown.grammar"
                {markdownConsume(yytext, MARKDOWNEM, yyscanner); }
                YY_BREAK
            case 2:
/* rule 2 can match eol */
                YY_RULE_SETUP
#line 59 "markdown.grammar"
                {markdownConsume(yytext, MARKDOWNSTRONG, yyscanner); }
                YY_BREAK
            case 3:
/* rule 3 can match eol */
                YY_RULE_SETUP
#line 60 "markdown.grammar"
                {markdownConsume(yytext, MARKDOWNSTRONGEM, yyscanner); }
                YY_BREAK
            case 4:
                YY_RULE_SETUP
#line 61 "markdown.grammar"
                {markdownConsume(yytext, MARKDOWNSTRIKETHROUGH, yyscanner); }
                YY_BREAK
            case 5:
                YY_RULE_SETUP
#line 62 "markdown.grammar"
                {markdownConsume(yytext, MARKDOWNCODESPAN, yyscanner); }
                YY_BREAK
            case 6:
                YY_RULE_SETUP
#line 63 "markdown.grammar"
                {markdownConsume(yytext, MARKDOWNHEADER, yyscanner); }
                YY_BREAK
            case 7:
/* rule 7 can match eol */
                YY_RULE_SETUP
#line 64 "markdown.grammar"
                {markdownConsume(yytext, MARKDOWNMULTILINEHEADER, yyscanner); }
                YY_BREAK
            case 8:
/* rule 8 can match eol */
                YY_RULE_SETUP
#line 65 "markdown.grammar"
                {markdownConsume(yytext, MARKDOWNURL, yyscanner); }
                YY_BREAK
            case 9:
/* rule 9 can match eol */
                YY_RULE_SETUP
#line 66 "markdown.grammar"
                {markdownConsume(yytext, MARKDOWNHREF, yyscanner); }
                YY_BREAK
            case 10:
                YY_RULE_SETUP
#line 67 "markdown.grammar"
                {markdownConsume(yytext, MARKDOWNBULLETSTART, yyscanner); }
                YY_BREAK
            case 11:
                *yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
                yyg->yy_c_buf_p = yy_cp -= 1;
                YY_DO_BEFORE_ACTION; /* set up yytext again */
                YY_RULE_SETUP
#line 69 "markdown.grammar"
                {markdownConsume(yytext, MARKDOWNNEWLINE, yyscanner); }
                YY_BREAK
            case 12:
/* rule 12 can match eol */
                YY_RULE_SETUP
#line 70 "markdown.grammar"
                {markdownConsume(yytext, MARKDOWNPARAGRAPH, yyscanner); }
                YY_BREAK
            case 13:
/* rule 13 can match eol */
                YY_RULE_SETUP
#line 71 "markdown.grammar"
                {markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner); }
                YY_BREAK
            case 14:
                YY_RULE_SETUP
#line 72 "markdown.grammar"
                {markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner); }
                YY_BREAK
            case 15:
                YY_RULE_SETUP
#line 73 "markdown.grammar"
                {markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner); }
                YY_BREAK
            case 16:
                YY_RULE_SETUP
#line 75 "markdown.grammar"
                ECHO;
                YY_BREAK
#line 1776 "lex.markdown.c"
            case YY_STATE_EOF(INITIAL):
                yyterminate();

            case YY_END_OF_BUFFER:
            {
                /* Amount of text matched not including the EOB char. */
                int yy_amount_of_matched_text = (int)(yy_cp - yyg->yytext_ptr) - 1;

                /* Undo the effects of YY_DO_BEFORE_ACTION. */
                *yy_cp = yyg->yy_hold_char;
                YY_RESTORE_YY_MORE_OFFSET

                if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW ) {
                    /* We're scanning a new file or input source.  It's
                     * possible that this happened because the user
                     * just pointed yyin at a new source and called
                     * markdownlex().  If so, then we have to assure
                     * consistency between YY_CURRENT_BUFFER and our
                     * globals.  Here is the right place to do so, because
                     * this is the first action (other than possibly a
                     * back-up) that will match for the new input source.
                     */
                    yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                    YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
                    YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
                }

                /* Note that here we test for yy_c_buf_p "<=" to the position
                 * of the first EOB in the buffer, since yy_c_buf_p will
                 * already have been incremented past the NUL character
                 * (since all states make transitions on EOB to the
                 * end-of-buffer state).  Contrast this with the test
                 * in input().
                 */
                if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] ) { /* This was really a NUL. */
                    yy_state_type yy_next_state;

                    yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

                    yy_current_state = yy_get_previous_state(yyscanner);

                    /* Okay, we're now positioned to make the NUL
                     * transition.  We couldn't have
                     * yy_get_previous_state() go ahead and do it
                     * for us because it doesn't know how to deal
                     * with the possibility of jamming (and we don't
                     * want to build jamming into it because then it
                     * will run more slowly).
                     */

                    yy_next_state = yy_try_NUL_trans(yy_current_state, yyscanner);

                    yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

                    if ( yy_next_state ) {
                        /* Consume the NUL. */
                        yy_cp = ++yyg->yy_c_buf_p;
                        yy_current_state = yy_next_state;
                        goto yy_match;
                    } else {
                        yy_cp = yyg->yy_c_buf_p;
                        goto yy_find_action;
                    }
                } else {switch ( yy_get_next_buffer(yyscanner) ) {
                            case EOB_ACT_END_OF_FILE:
                            {
                                yyg->yy_did_buffer_switch_on_eof = 0;

                                if ( markdownwrap(yyscanner) ) {
                                    /* Note: because we've taken care in
                                     * yy_get_next_buffer() to have set up
                                     * yytext, we can now set up
                                     * yy_c_buf_p so that if some total
                                     * hoser (like flex itself) wants to
                                     * call the scanner after we return the
                                     * YY_NULL, it'll still work - another
                                     * YY_NULL will get returned.
                                     */
                                    yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

                                    yy_act = YY_STATE_EOF(YY_START);
                                    goto do_action;
                                } else {
                                    if ( !yyg->yy_did_buffer_switch_on_eof ) {
                                        YY_NEW_FILE;
                                    }
                                }
                                break;
                            }

                            case EOB_ACT_CONTINUE_SCAN:
                                yyg->yy_c_buf_p =
                                    yyg->yytext_ptr + yy_amount_of_matched_text;

                                yy_current_state = yy_get_previous_state(yyscanner);

                                yy_cp = yyg->yy_c_buf_p;
                                yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
                                goto yy_match;

                            case EOB_ACT_LAST_MATCH:
                                yyg->yy_c_buf_p =
                                    &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

                                yy_current_state = yy_get_previous_state(yyscanner);

                                yy_cp = yyg->yy_c_buf_p;
                                yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
                                goto yy_find_action;
                        }
                }
                break;
            }

            default:
                YY_FATAL_ERROR(
                    "fatal flex scanner internal error--no action found");
        } /* end of action switch */
    }             /* end of scanning one token */
} /* end of markdownlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer(yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
    register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
    register char *source = yyg->yytext_ptr;
    register int number_to_move, i;
    int ret_val;

    if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] ) {
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--end of buffer missed");
    }

    if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 ) { /* Don't try to fill the buffer, so this is an EOF. */
        if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 ) {
            /* We matched a single character, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
        } else {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
        }
    }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (int)(yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

    for ( i = 0; i < number_to_move; ++i ) {
        *(dest++) = *(source++);
    }

    if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING ) {
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;
    } else {
        yy_size_t num_to_read =
            YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 ) { /* Not enough room in the buffer - grow it. */
                                    /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

            int yy_c_buf_p_offset =
                (int)(yyg->yy_c_buf_p - b->yy_ch_buf);

            if ( b->yy_is_our_buffer ) {
                yy_size_t new_size = b->yy_buf_size * 2;

                if ( new_size <= 0 ) {
                    b->yy_buf_size += b->yy_buf_size / 8;
                } else {
                    b->yy_buf_size *= 2;
                }

                b->yy_ch_buf = (char *)
                    /* Include room in for 2 EOB chars. */
                    markdownrealloc((void *)b->yy_ch_buf, b->yy_buf_size + 2, yyscanner);
            } else {
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;
            }

            if ( !b->yy_ch_buf ) {
                YY_FATAL_ERROR(
                    "fatal error - scanner input buffer overflow");
            }

            yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
                number_to_move - 1;
        }

        if ( num_to_read > YY_READ_BUF_SIZE ) {
            num_to_read = YY_READ_BUF_SIZE;
        }

        /* Read in more data. */
        YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
                  yyg->yy_n_chars, num_to_read);

        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
    }

    if ( yyg->yy_n_chars == 0 ) {
        if ( number_to_move == YY_MORE_ADJ ) {
            ret_val = EOB_ACT_END_OF_FILE;
            markdownrestart(yyin, yyscanner);
        } else {
            ret_val = EOB_ACT_LAST_MATCH;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
        }
    } else {
        ret_val = EOB_ACT_CONTINUE_SCAN;
    }

    if ((yy_size_t)(yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
        /* Extend the array by 50%, plus the number we really need. */
        yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *)markdownrealloc((void *)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size, yyscanner);
        if ( !YY_CURRENT_BUFFER_LVALUE->yy_ch_buf ) {
            YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
        }
    }

    yyg->yy_n_chars += number_to_move;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

    return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state(yyscan_t yyscanner) {
    register yy_state_type yy_current_state;
    register char *yy_cp;
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

    yy_current_state = yyg->yy_start;
    yy_current_state += YY_AT_BOL();

    for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp ) {
        register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        if ( yy_accept[yy_current_state] ) {
            yyg->yy_last_accepting_state = yy_current_state;
            yyg->yy_last_accepting_cpos = yy_cp;
        }
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state ) {
            yy_current_state = (int)yy_def[yy_current_state];
            if ( yy_current_state >= 376 ) {
                yy_c = yy_meta[(unsigned int)yy_c];
            }
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
    }

    return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state, yyscan_t yyscanner) {
    register int yy_is_jam;
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner; /* This var may be unused depending upon options. */
    register char *yy_cp = yyg->yy_c_buf_p;

    register YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] ) {
        yyg->yy_last_accepting_state = yy_current_state;
        yyg->yy_last_accepting_cpos = yy_cp;
    }
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state ) {
        yy_current_state = (int)yy_def[yy_current_state];
        if ( yy_current_state >= 376 ) {
            yy_c = yy_meta[(unsigned int)yy_c];
        }
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
    yy_is_jam = (yy_current_state == 375);

    return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(yyscan_t yyscanner)
#else
static int input(yyscan_t yyscanner)
#endif

{
    int c;
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

    *yyg->yy_c_buf_p = yyg->yy_hold_char;

    if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR ) {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] ) {
            /* This was really a NUL. */
            *yyg->yy_c_buf_p = '\0';
        } else {          /* need more input */
            yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
            ++yyg->yy_c_buf_p;

            switch ( yy_get_next_buffer(yyscanner) ) {
                case EOB_ACT_LAST_MATCH:
                    /* This happens because yy_g_n_b()
                     * sees that we've accumulated a
                     * token and flags that we need to
                     * try matching the token before
                     * proceeding.  But for input(),
                     * there's no matching to consider.
                     * So convert the EOB_ACT_LAST_MATCH
                     * to EOB_ACT_END_OF_FILE.
                     */

                    /* Reset buffer status. */
                    markdownrestart(yyin, yyscanner);

                /*FALLTHROUGH*/

                case EOB_ACT_END_OF_FILE:
                {
                    if ( markdownwrap(yyscanner) ) {
                        return 0;
                    }

                    if ( !yyg->yy_did_buffer_switch_on_eof ) {
                        YY_NEW_FILE;
                    }
#ifdef __cplusplus
                    return yyinput(yyscanner);
#else
                    return input(yyscanner);
#endif
                }

                case EOB_ACT_CONTINUE_SCAN:
                    yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
                    break;
            }
        }
    }

    c = *(unsigned char *)yyg->yy_c_buf_p;      /* cast for 8-bit char's */
    *yyg->yy_c_buf_p = '\0';            /* preserve yytext */
    yyg->yy_hold_char = *++yyg->yy_c_buf_p;

    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

    return c;
}
#endif  /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
void markdownrestart(FILE *input_file, yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

    if ( !YY_CURRENT_BUFFER ) {
        markdownensure_buffer_stack(yyscanner);
        YY_CURRENT_BUFFER_LVALUE =
            markdown_create_buffer(yyin, YY_BUF_SIZE, yyscanner);
    }

    markdown_init_buffer(YY_CURRENT_BUFFER, input_file, yyscanner);
    markdown_load_buffer_state(yyscanner);
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
void markdown_switch_to_buffer(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

    /* TODO. We should be able to replace this entire function body
     * with
     *		markdownpop_buffer_state();
     *		markdownpush_buffer_state(new_buffer);
     */
    markdownensure_buffer_stack(yyscanner);
    if ( YY_CURRENT_BUFFER == new_buffer ) {
        return;
    }

    if ( YY_CURRENT_BUFFER ) {
        /* Flush out information for old buffer. */
        *yyg->yy_c_buf_p = yyg->yy_hold_char;
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
    }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    markdown_load_buffer_state(yyscanner);

    /* We don't actually know whether we did this switch during
     * EOF (markdownwrap()) processing, but the only time this flag
     * is looked at is after markdownwrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yyg->yy_did_buffer_switch_on_eof = 1;
}

static void markdown_load_buffer_state(yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
    yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE markdown_create_buffer(FILE *file, int size, yyscan_t yyscanner) {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE)markdownalloc(sizeof(struct yy_buffer_state), yyscanner);
    if ( !b ) {
        YY_FATAL_ERROR("out of dynamic memory in markdown_create_buffer()");
    }

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *)markdownalloc(b->yy_buf_size + 2, yyscanner);
    if ( !b->yy_ch_buf ) {
        YY_FATAL_ERROR("out of dynamic memory in markdown_create_buffer()");
    }

    b->yy_is_our_buffer = 1;

    markdown_init_buffer(b, file, yyscanner);

    return b;
}

/** Destroy the buffer.
 * @param b a buffer created with markdown_create_buffer()
 * @param yyscanner The scanner object.
 */
void markdown_delete_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

    if ( !b ) {
        return;
    }

    if ( b == YY_CURRENT_BUFFER ) {   /* Not sure if we should pop here. */
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE)0;
    }

    if ( b->yy_is_our_buffer ) {
        markdownfree((void *)b->yy_ch_buf, yyscanner);
    }

    markdownfree((void *)b, yyscanner);
}

#ifndef __cplusplus
extern int isatty(int);
#endif /* __cplusplus */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a markdownrestart() or at EOF.
 */
static void markdown_init_buffer(YY_BUFFER_STATE b, FILE *file, yyscan_t yyscanner) {
    int oerrno = errno;
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

    markdown_flush_buffer(b, yyscanner);

    b->yy_input_file = file;
    b->yy_fill_buffer = 1;

    /* If b is the current buffer, then markdown_init_buffer was _probably_
     * called from markdownrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER) {
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

    b->yy_is_interactive = file ? (isatty(fileno(file) ) > 0) : 0;

    errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
void markdown_flush_buffer(YY_BUFFER_STATE b, yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
    if ( !b ) {
        return;
    }

    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if ( b == YY_CURRENT_BUFFER ) {
        markdown_load_buffer_state(yyscanner);
    }
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void markdownpush_buffer_state(YY_BUFFER_STATE new_buffer, yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
    if (new_buffer == NULL) {
        return;
    }

    markdownensure_buffer_stack(yyscanner);

    /* This block is copied from markdown_switch_to_buffer. */
    if ( YY_CURRENT_BUFFER ) {
        /* Flush out information for old buffer. */
        *yyg->yy_c_buf_p = yyg->yy_hold_char;
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
    }

    /* Only push if top exists. Otherwise, replace top. */
    if (YY_CURRENT_BUFFER) {
        yyg->yy_buffer_stack_top++;
    }
    YY_CURRENT_BUFFER_LVALUE = new_buffer;

    /* copied from markdown_switch_to_buffer. */
    markdown_load_buffer_state(yyscanner);
    yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void markdownpop_buffer_state(yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
    if (!YY_CURRENT_BUFFER) {
        return;
    }

    markdown_delete_buffer(YY_CURRENT_BUFFER, yyscanner);
    YY_CURRENT_BUFFER_LVALUE = NULL;
    if (yyg->yy_buffer_stack_top > 0) {
        --yyg->yy_buffer_stack_top;
    }

    if (YY_CURRENT_BUFFER) {
        markdown_load_buffer_state(yyscanner);
        yyg->yy_did_buffer_switch_on_eof = 1;
    }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void markdownensure_buffer_stack(yyscan_t yyscanner) {
    yy_size_t num_to_alloc;
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

    if (!yyg->yy_buffer_stack) {
        /* First allocation is just for 2 elements, since we don't know if this
         * scanner will even need a stack. We use 2 instead of 1 to avoid an
         * immediate realloc on the next call.
         */
        num_to_alloc = 1;
        yyg->yy_buffer_stack = (struct yy_buffer_state **)markdownalloc
                (num_to_alloc * sizeof(struct yy_buffer_state *)
                , yyscanner);
        if ( !yyg->yy_buffer_stack ) {
            YY_FATAL_ERROR("out of dynamic memory in markdownensure_buffer_stack()");
        }

        memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state *));

        yyg->yy_buffer_stack_max = num_to_alloc;
        yyg->yy_buffer_stack_top = 0;
        return;
    }

    if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1) {
        /* Increase the buffer to prepare for a possible push. */
        int grow_size = 8 /* arbitrary grow size */;

        num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
        yyg->yy_buffer_stack = (struct yy_buffer_state **)markdownrealloc
                (yyg->yy_buffer_stack,
                num_to_alloc * sizeof(struct yy_buffer_state *)
                , yyscanner);
        if ( !yyg->yy_buffer_stack ) {
            YY_FATAL_ERROR("out of dynamic memory in markdownensure_buffer_stack()");
        }

        /* zero only the new slots.*/
        memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state *));
        yyg->yy_buffer_stack_max = num_to_alloc;
    }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE markdown_scan_buffer(char *base, yy_size_t size, yyscan_t yyscanner) {
    YY_BUFFER_STATE b;

    if ( size < 2 ||
         base[size - 2] != YY_END_OF_BUFFER_CHAR ||
         base[size - 1] != YY_END_OF_BUFFER_CHAR ) {
        /* They forgot to leave room for the EOB's. */
        return 0;
    }

    b = (YY_BUFFER_STATE)markdownalloc(sizeof(struct yy_buffer_state), yyscanner);
    if ( !b ) {
        YY_FATAL_ERROR("out of dynamic memory in markdown_scan_buffer()");
    }

    b->yy_buf_size = size - 2;          /* "- 2" to take care of EOB's */
    b->yy_buf_pos = b->yy_ch_buf = base;
    b->yy_is_our_buffer = 0;
    b->yy_input_file = 0;
    b->yy_n_chars = b->yy_buf_size;
    b->yy_is_interactive = 0;
    b->yy_at_bol = 1;
    b->yy_fill_buffer = 0;
    b->yy_buffer_status = YY_BUFFER_NEW;

    markdown_switch_to_buffer(b, yyscanner);

    return b;
}

/** Setup the input buffer state to scan a string. The next call to markdownlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       markdown_scan_bytes() instead.
 */
YY_BUFFER_STATE markdown_scan_string(yyconst char *yystr, yyscan_t yyscanner) {
    return markdown_scan_bytes(yystr, strlen(yystr), yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to markdownlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE markdown_scan_bytes(yyconst char *yybytes, yy_size_t _yybytes_len, yyscan_t yyscanner) {
    YY_BUFFER_STATE b;
    char *buf;
    yy_size_t n, i;

    /* Get memory for full buffer, including space for trailing EOB's. */
    n = _yybytes_len + 2;
    buf = (char *)markdownalloc(n, yyscanner);
    if ( !buf ) {
        YY_FATAL_ERROR("out of dynamic memory in markdown_scan_bytes()");
    }

    for ( i = 0; i < _yybytes_len; ++i ) {
        buf[i] = yybytes[i];
    }

    buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

    b = markdown_scan_buffer(buf, n, yyscanner);
    if ( !b ) {
        YY_FATAL_ERROR("bad buffer in markdown_scan_bytes()");
    }

    /* It's okay to grow etc. this buffer, and we should throw it
     * away when we're done.
     */
    b->yy_is_our_buffer = 1;

    return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error(yyconst char *msg, yyscan_t yyscanner) {
    (void)fprintf(stderr, "%s\n", msg);
    exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
    do \
    { \
        /* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg); \
        yytext[yyleng] = yyg->yy_hold_char; \
        yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
        yyg->yy_hold_char = *yyg->yy_c_buf_p; \
        *yyg->yy_c_buf_p = '\0'; \
        yyleng = yyless_macro_arg; \
    } \
    while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE markdownget_extra(yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int markdownget_lineno(yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

    if (!YY_CURRENT_BUFFER) {
        return 0;
    }

    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int markdownget_column(yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

    if (!YY_CURRENT_BUFFER) {
        return 0;
    }

    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *markdownget_in(yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *markdownget_out(yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t markdownget_leng(yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *markdownget_text(yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void markdownset_extra(YY_EXTRA_TYPE user_defined, yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
    yyextra = user_defined;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void markdownset_lineno(int line_number, yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

    /* lineno is only valid if an input buffer exists. */
    if (!YY_CURRENT_BUFFER ) {
        yy_fatal_error("markdownset_lineno called with no buffer", yyscanner);
    }

    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void markdownset_column(int column_no, yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

    /* column is only valid if an input buffer exists. */
    if (!YY_CURRENT_BUFFER ) {
        yy_fatal_error("markdownset_column called with no buffer", yyscanner);
    }

    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see markdown_switch_to_buffer
 */
void markdownset_in(FILE *in_str, yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
    yyin = in_str;
}

void markdownset_out(FILE *out_str, yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
    yyout = out_str;
}

int markdownget_debug(yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
    return yy_flex_debug;
}

void markdownset_debug(int bdebug, yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
    yy_flex_debug = bdebug;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* markdownlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int markdownlex_init(yyscan_t *ptr_yy_globals) {
    if (ptr_yy_globals == NULL) {
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t)markdownalloc(sizeof(struct yyguts_t), NULL);

    if (*ptr_yy_globals == NULL) {
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals, 0x00, sizeof(struct yyguts_t));

    return yy_init_globals(*ptr_yy_globals);
}

/* markdownlex_init_extra has the same functionality as markdownlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to markdownalloc in
 * the yyextra field.
 */

int markdownlex_init_extra(YY_EXTRA_TYPE yy_user_defined, yyscan_t *ptr_yy_globals) {
    struct yyguts_t dummy_yyguts;

    markdownset_extra(yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL) {
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t)markdownalloc(sizeof(struct yyguts_t), &dummy_yyguts);

    if (*ptr_yy_globals == NULL) {
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
       yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals, 0x00, sizeof(struct yyguts_t));

    markdownset_extra(yy_user_defined, *ptr_yy_globals);

    return yy_init_globals(*ptr_yy_globals);
}

static int yy_init_globals(yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from markdownlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *)0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *)0;
    yyout = (FILE *)0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * markdownlex_init()
     */
    return 0;
}

/* markdownlex_destroy is for both reentrant and non-reentrant scanners. */
int markdownlex_destroy(yyscan_t yyscanner) {
    struct yyguts_t *yyg = (struct yyguts_t *)yyscanner;

    /* Pop the buffer stack, destroying each element. */
    while (YY_CURRENT_BUFFER) {
        markdown_delete_buffer(YY_CURRENT_BUFFER, yyscanner);
        YY_CURRENT_BUFFER_LVALUE = NULL;
        markdownpop_buffer_state(yyscanner);
    }

    /* Destroy the stack itself. */
    markdownfree(yyg->yy_buffer_stack, yyscanner);
    yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
    markdownfree(yyg->yy_start_stack, yyscanner);
    yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * markdownlex() is called, initialization will occur. */
    yy_init_globals(yyscanner);

    /* Destroy the main struct (reentrant only). */
    markdownfree(yyscanner, yyscanner);
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char *s1, yyconst char *s2, int n, yyscan_t yyscanner) {
    register int i;
    for ( i = 0; i < n; ++i ) {
        s1[i] = s2[i];
    }
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *s, yyscan_t yyscanner) {
    register int n;
    for ( n = 0; s[n]; ++n ) {
        ;
    }

    return n;
}
#endif

void *markdownalloc(yy_size_t size, yyscan_t yyscanner) {
    return (void *)malloc(size);
}

void *markdownrealloc(void *ptr, yy_size_t size, yyscan_t yyscanner) {
    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void *)realloc( (char *)ptr, size);
}

void markdownfree(void *ptr, yyscan_t yyscanner) {
    free( (char *)ptr);         /* see markdownrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 75 "markdown.grammar"



int markdownwrap(yyscan_t yyscanner) {
    return 1;
}

